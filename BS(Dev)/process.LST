C166 COMPILER V7.53.0.0, PROCESS                                                           12/14/2017 11:31:10 PAGE 1   


C166 COMPILER V7.53.0.0, COMPILATION OF MODULE PROCESS
OBJECT MODULE PLACED IN .\output\process.obj
COMPILER INVOKED BY: C:\Keil\C166\BIN\C166.EXE process.c XLARGE BROWSE MOD167 DEBUG TABS(2) OBJECT(.\output\process.obj)
                    - 

 stmt lvl     source

    1         #include "process.h"
    2         #include "protocol.h"
    3         #include "devices.h"
    4         #include "settings.h"
    5         
    6         //–±–ª–æ–∫–∏
    7         #include "bdmg.h"
    8         #include "bdgp.h"
    9         #include "bdsp.h"
   10         //
   11         #include "can.h"
   12         #include "system.h"
   13         
   14         uint8 processByte;  //–±–∞–π—Ç —Å—Ç–∞—Ç—É—Å–∞ –ò–ú–î_–ë
   15         
   16         __IO float  counter = 0;
   17         __IO static uint32  mainCounter = 0;
   18         __IO static uint8   bdgpsRptCounter = 0;  //—Å—á—ë—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∞–∑–∞—Ü–∏–∏ –
             -ë–î–ì–ü-–°–∞
   19         static uint16 waitCounter = 0;
   20         
   21         static tProcessDoseExceeded     ProcessDoseExceeded;
   22         static tProcessDoseRateExceeded ProcessDoseRateExceeded;
   23         void  Process_Initializetion(void)
   24         {
   25  1          processByte = 0;
   26  1          mainCounter = 0;
   27  1          waitCounter = 0;
   28  1          bdgpsRptCounter = 0;
   29  1        
   30  1        memset((uint8*)&ProcessDoseExceeded,0,sizeof(tProcessDoseExceeded));
   31  1        memset((uint8*)&ProcessDoseRateExceeded,0,sizeof(tProcessDoseRateExceeded));
   32  1        
   33  1      
   34  1      }
   35         void  Process_ResetWaitCounter()
   36         {
   37  1        waitCounter = 0;
   38  1      }
   39         uint16  Process_GetWaitCounter()
   40         {
   41  1        return waitCounter;
   42  1      }
   43         
   44         void  Process_SetStatus(IMDB_Status Status) //—Å—Ç–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å –ò–ú–î–ë
   45         { 
   46  1        
   47  1        processByte = processByte & 0xF0;
   48  1        processByte = processByte | Status;
   49  1        
   50  1      }
   51         void  Process_BDGPStatus(Device_Status Status)  //—Å—Ç–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å –ë–î–ì–ü
   52         {
   53  1        if(Status)
C166 COMPILER V7.53.0.0, PROCESS                                                           12/14/2017 11:31:10 PAGE 2   

   54  1          SET_BIT(processByte,4);
   55  1        else
   56  1          CLEAR_BIT(processByte,4);
   57  1        
   58  1        
   59  1      }
   60         void  Process_BDMGStatus(Device_Status Status)  //—Å—Ç–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å –ë–î–ú–ì
   61         {
   62  1        if(Status)
   63  1          SET_BIT(processByte,5);
   64  1        else
   65  1          CLEAR_BIT(processByte,5);
   66  1      }
   67         void  Process_BDPSStatus(Device_Status Status)  //—Å—Ç–∞—Ç—É—Å –¥–ª—è –ë–î–ì–ü-–°
   68         {
   69  1        CLEAR_BIT(processByte,6);
   70  1        CLEAR_BIT(processByte,7);
   71  1        
   72  1        
   73  1        if(Status == DEVICE_WAITING)
   74  1          SET_BIT(processByte,7);
   75  1        if(Status == DEVICE_READY)
   76  1          SET_BIT(processByte,6);
   77  1      
   78  1      }
   79         uint8 Process_GetBDMGState()
   80         {
   81  1        if( ((processByte >> 5) & 0x1))return 1;
   82  1        else return 0;
   83  1      }
   84         uint8 Process_GetBDGPState()
   85         {
   86  1        if( ((processByte >> 4) & 0x1))return 1;
   87  1        else return 0;
   88  1      }
   89         uint8 Process_GetBDPSStatus()
   90         {
   91  1        if( ((processByte >> 6) & 0x1))return 1;      //ready
   92  1        else if( ((processByte >> 7) & 0x1))return 2; //waiting
   93  1        else return 0;
   94  1      }
   95           
   96         
   97         uint8 Process_GetInfo() //–ø–æ–ª—É—á–∞–µ–º –±–∞–π—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ò–ú–î–ë
   98         {
   99  1        return processByte;
  100  1      }
  101         
  102         
  103         IMDB_Status Process_GetOperationMode()
  104         {
  105  1        return (processByte & 0x0F);
  106  1      }
  107         
  108         void  Process_MainProc()  interrupt 0x20
  109         {
  110  1        float insideDoseRate = 0;
  111  1        float outsideDoseRate = 0;
  112  1        float insideDose = 0;
  113  1        
  114  1        float fBackgroundQuantile = 0;
  115  1        uint8 identificationValue = 0;
C166 COMPILER V7.53.0.0, PROCESS                                                           12/14/2017 11:31:10 PAGE 3   

  116  1        
  117  1        //IMDB_SendPacket(IMDB_PING,0,0);
  118  1        /*pCanInfo = (uint8*)malloc(sizeof(uint8) * 64);
  119  1        
  120  1        if(pCanInfo)
  121  1        {
  122  1          for(i = 0;i<8;i++)
  123  1          {
  124  1            
  125  1            
  126  1            *((uint16*)&msgData[0]) = CAN_Message_16[i].MODATALL;
  127  1            *((uint16*)&msgData[2]) = CAN_Message_16[i].MODATALH;
  128  1            *((uint16*)&msgData[4]) = CAN_Message_16[i].MODATAHL;
  129  1            *((uint16*)&msgData[6]) = CAN_Message_16[i].MODATAHH;
  130  1            
  131  1            memcpy(pCanInfo + ( i * 8),(uint8*)msgData,sizeof(uint8) * 8);
  132  1          
  133  1            
  134  1          }
  135  1          IMDB_SendPacket(IMDB_PING,(uint8*)pCanInfo,sizeof(uint8) * 64);
  136  1          free(pCanInfo);
  137  1        }*/
  138  1        
  139  1        switch(Process_GetOperationMode())
  140  1        {
  141  2            case IMDB_INITIALIZATION:
  142  2            {
  143  3              //3 —Å–µ–∫ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  144  3              if(mainCounter == 3)
  145  3              {
  146  4                
  147  4                
  148  4                /*
  149  4                1. –ï—Å–ª–∏ –µ—Å—Ç—å –ë–î–ì–ü, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ú–î —Å–Ω–∞—Ä—É–∂–∏.
  150  4                2. –ï—Å–ª–∏ –ú–î –º–µ–Ω—å—à–µ 0.1–º–ì—Ä/—á, —Ç–æ –≤–∫–ª—é—á–∞–µ–º HV –¥–ª—è –§–≠–£
  151  4                3. –ï—Å–ª–∏ –ë–î–ì–ü –Ω–µ—Ç, —Ç–æ –º–µ—Ä—è–µ–º –ú–î –ë–î–ì–ú–æ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø2 —Å —É—á—ë—
             -Ç–æ–º –ö–≠.
  152  4                */
  153  4                //–∏—â–µ–º —Å–ø–µ–∫—Ç—Ä–æ–º–µ—Ç—Ä
  154  4                if(Process_GetBDPSStatus())
  155  4                {
  156  5                  if(BDSP_ChannelInitCheck() != CHK_OK)
  157  5                  {
  158  6                    Process_BDPSStatus(DEVICE_NOTREADY);
  159  6                    //–∏—â–µ–º –ë–î–ì–ü-–° –ø–æ–≤—Ç–æ—Ä–Ω–æ
  160  6                    if(bdgpsRptCounter < BDGPS_RPT_COUNTS){
  161  7                        mainCounter = 1;
  162  7                        BDSP_Reset();
  163  7                        bdgpsRptCounter++;
  164  7                        
  165  7                        return;
  166  7                    }
  167  6                  }
  168  5                  else
  169  5                  {
  170  6                  
  171  6                  
  172  6                    if(Process_GetBDGPState() ){//–ë–î–ì–ü –æ–±–Ω–∞—Ä—É–∂–µ–Ω
  173  7                      BDGP_Start(); //–∑–∞–ø—É—Å–∫–∞–µ–º –ë–î–ì–ü
  174  7                    }
  175  6                    else if(Process_GetBDMGState() ){//–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ç–æ –º–µ—Ä—è–µ–º –ë–î–ú–ì–æ–º
  176  7                      BDMG_Start();
C166 COMPILER V7.53.0.0, PROCESS                                                           12/14/2017 11:31:10 PAGE 4   

  177  7                      
  178  7                    }
  179  6                    //–µ—Å–ª–∏ –Ω–µ—Ç –æ–±–æ–∏—Ö –¥–æ–∑–∏–º–µ—Ç—Ä–æ–≤ —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –∫–æ–Ω—Ç—Ä–
             -æ–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  180  6                    else {
  181  7                      Process_SetStatus(IMDB_OPERATION_CONTROL);
  182  7                    }
  183  6                  }
  184  5                }
  185  4                else{
  186  5                  //–µ—Å–ª–∏ —Å–ø–µ–∫—Ç—Ä–æ–º–µ—Ç—Ä–∞ –Ω–µ—Ç
  187  5                  if(!Process_GetBDGPState() && !Process_GetBDMGState())//–ò –ë–î —Ç–æ–∂–µ –Ω–µ—Ç, —Ç–æ –≤—ã–¥–∞—ë–º —
             -Å—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –Ω–µ–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
  188  5                    IMDB_SendReady();
  189  5                }
  190  4                
  191  4                Process_SetStatus(IMDB_OPERATION_CONTROL);
  192  4            
  193  4              }
  194  3            }break;
  195  2            
  196  2            case IMDB_OPERATION_CONTROL:
  197  2            {       
  198  3              //–µ—â—ë 10 —Å–µ–∫ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–π –ú–î
  199  3              
  200  3              //–µ—Å–ª–∏ –µ—Å—Ç—å —Å–ø–µ–∫—Ç—Ä–æ–º–µ—Ç—Ä, —Ç–æ –∂–¥—ë–º –∑–∞–º–µ—Ä–∞ –ú–î, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –µ
             -—ë –∏ –¥–∞—ë–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Ä–∞–±–æ—Ç—É —Å –Ω–∏–º
  201  3              /*
  202  3              */
  203  3              if(Process_GetBDPSStatus())
  204  3              {       
  205  4                if(mainCounter == 10){
  206  5                  BDGP_Stop();
  207  5                  BDMG_Stop();
  208  5                  
  209  5                  //–∑–∞–∫–æ–Ω—á–∏–ª–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è, —Ç–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –≤–Ω–µ—à–Ω—é—é –ú–î.
  210  5                  if(Process_GetBDGPState()){
  211  6                    outsideDoseRate = BDGP_GetAverageDoseRate();
  212  6                  }
  213  5                  else if(Process_GetBDMGState()){
  214  6                    outsideDoseRate = BDMG_GetCurrentDose() * MainSettings.shieldingFactor; //–µ—Å–ª–∏ –Ω–µ—Ç –ë–î–ì–ü,
             - —Ç–æ —Å—á–∏—Ç–∞–µ–º –ú–î –≤–Ω–µ—à, –∫–∞–∫ –ú–î –≤–Ω—É—Ç—Ä–∏ * –ö–≠
  215  6                  }
  216  5                  else{
  217  6                    outsideDoseRate = 0;  //TODO –ø–æ–ª—É—á–∏—Ç—å –ú–î —Å–æ —Å–ø–µ–∫—Ç—Ä–æ–º–µ—Ç—Ä–∞
  218  6                  }
  219  5                }
  220  4                //–æ–∂–∏–¥–∞–µ–º —Å—Ç–∞–±–∏–ª–∏–∂–∞—Ü–∏–∏
  221  4                if(mainCounter > 10 && mainCounter < 70)
  222  4                {
  223  5                  if(Process_GetBDPSStatus() == DEVICE_READY)//–¥–æ–∂–¥–∞–ª–∏—Å—å —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –ë–î–ì–ü-–°
  224  5                  {
  225  6                    Process_SetStatus(IMDB_BACKGROUND_ACCUMULATION);
  226  6                    BDSP_Start(); //–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–ø–µ–∫—Ç—Ä–æ–º–µ—Ç—Ä
  227  6                    
  228  6                    IMDB_SendReady();
  229  6                  }
  230  5                }
  231  4              }
  232  3              //–≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º —à—Ç–∞—Ç–Ω–æ–π —Ä–∞–±
             -–æ—Ç—ã –±–µ–∑ —Å–ø–µ–∫—Ç—Ä–æ–º–µ—Ç—Ä–∞
  233  3              else
C166 COMPILER V7.53.0.0, PROCESS                                                           12/14/2017 11:31:10 PAGE 5   

  234  3              {
  235  4                //–µ—Å–ª–∏ –µ—Å—Ç—å –ë–î–ì–ü-–ë, —Ç–æ –∫–æ–ø–∏–º —Ñ–æ–Ω
  236  4                if(Process_GetBDGPState()/* || Process_GetBDMGState()*/)
  237  4                { 
  238  5                  Process_SetStatus(IMDB_BACKGROUND_ACCUMULATION);
  239  5                  Process_IMDBStart();
  240  5                  
  241  5                  IMDB_SendReady();
  242  5                }
  243  4                //–µ—Å–ª–∏ –Ω–µ—Ç –ë–î–ì–ü-–ë –Ω–æ –µ—Å—Ç—å –ë–î–ú–ì-–ë —Ç–æ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —à—Ç–∞—
             -Ç–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
  244  4                else if(Process_GetBDMGState())
  245  4                {
  246  5                    Process_SetStatus(IMDB_FULLTIME_WORK);
  247  5                    Process_IMDBStart();
  248  5                  
  249  5                    IMDB_SendReady();
  250  5                }
  251  4              
  252  4                else
  253  4                {
  254  5                  
  255  5                }
  256  4              }
  257  3              
  258  3            }break;
  259  2            
  260  2            case IMDB_BACKGROUND_ACCUMULATION:
  261  2            {
  262  3              
  263  3            }break;
  264  2            
  265  2            case IMDB_FULLTIME_WORK:
  266  2            {
  267  3              /*
  268  3                –†–µ–∂–∏–º —à—Ç–∞—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
  269  3              
  270  3                - –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º –º–æ—â–Ω–æ—Å—Ç–∏ –¥–æ–∑—ã —Å–Ω–∞—Ä—É–∂–∏ –∏ –≤–Ω—É—Ç—Ä–∏
  271  3                - –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ú–î –≤–∫–ª—é—á–∞–µ–º –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ–º —Å–ø–µ–∫—Ç—Ä–æ–º–µ—Ç
             -—Ä
  272  3                - –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—Å—á—ë—Ç–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞ –ø–æ —Ñ–æ–Ω—É
  273  3              */
  274  3              //–≤—ã—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ú–î
  275  3              
  276  3                //–µ—Å–ª–∏ –µ—Å—Ç—å —Å–ø–µ–∫—Ç—Ä–æ–º–µ—Ç—Ä –∏ —É –Ω–µ–≥–æ –Ω–∞–∫–æ–ø–ª–µ–Ω —Ñ–æ–Ω
  277  3      
  278  3                
  279  3                //–µ—Å–ª–∏ –µ—Å—Ç—å –ë–î–ì–ü-–ë
  280  3                if(Process_GetBDGPState() == DEVICE_READY){         
  281  4                    outsideDoseRate = BDGP_GetAverageDoseRate();//–ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ú–î
  282  4                
  283  4                      
  284  4                }
  285  3                else
  286  3                    outsideDoseRate = BDMG_GetCurrentDose() * MainSettings.shieldingFactor;
  287  3                
  288  3                if(Process_GetBDMGState() == DEVICE_READY)
  289  3                    insideDoseRate = BDMG_GetCurrentDose();
  290  3                else
  291  3                  insideDoseRate = BDGP_GetAverageDoseRate() / MainSettings.shieldingFactor;
  292  3                
  293  3                  insideDose = BDMG_GetDose();
C166 COMPILER V7.53.0.0, PROCESS                                                           12/14/2017 11:31:10 PAGE 6   

  294  3                  
  295  3                    //—Å–æ–±—ã—Ç–∏—è –ø–æ—Ä–æ–≥–æ–≤ –ø–æ –ú–î
  296  3                    //–ø–æ—Ä–æ–≥ 1
  297  3                    if(outsideDoseRate > MainSettings.limitDetect[1]){
  298  4                      
  299  4                      if(!ProcessDoseRateExceeded.rRangeFlag[0]){
  300  5                        IMDB_SendDoseRateExceeded(1);
  301  5                        ProcessDoseRateExceeded.rRangeFlag[0] = 1;
  302  5                        }
  303  4                    }
  304  3                    else{
  305  4                      if(ProcessDoseRateExceeded.rRangeFlag[0] == 1){
  306  5                        ProcessDoseRateExceeded.rRangeFlag[0] = 0;
  307  5                        IMDB_SendDoseRateExceeded(0);
  308  5                      }
  309  4                    }
  310  3                    //–ø–æ—Ä–æ–≥ 2
  311  3                    if(outsideDoseRate > MainSettings.limitDetect[2]){
  312  4                      
  313  4                      if(!ProcessDoseRateExceeded.rRangeFlag[1]){
  314  5                        IMDB_SendDoseRateExceeded(2);
  315  5                        ProcessDoseRateExceeded.rRangeFlag[1] = 1;
  316  5                      }
  317  4                    }
  318  3                    else{
  319  4                      if(ProcessDoseRateExceeded.rRangeFlag[1] == 1){
  320  5                        ProcessDoseRateExceeded.rRangeFlag[1] = 0;
  321  5                        IMDB_SendDoseRateExceeded(0);
  322  5                      }
  323  4                    }
  324  3                    //–ø–æ—Ä–æ–≥ 3
  325  3                    if(outsideDoseRate > MainSettings.limitDetect[3]){
  326  4                      
  327  4                      if(!ProcessDoseRateExceeded.rRangeFlag[2]){
  328  5                      IMDB_SendDoseRateExceeded(3);
  329  5                      ProcessDoseRateExceeded.rRangeFlag[2] = 1;
  330  5                      }
  331  4                    }
  332  3                    else{
  333  4                      if(ProcessDoseRateExceeded.rRangeFlag[2] == 1){
  334  5                        ProcessDoseRateExceeded.rRangeFlag[2] = 0;
  335  5                        IMDB_SendDoseRateExceeded(0);
  336  5                      }
  337  4                    }
  338  3                    //–ø–æ—Ä–æ–≥ 4
  339  3                    if(outsideDoseRate > MainSettings.limitDetect[4]){
  340  4                      
  341  4                      if(!ProcessDoseRateExceeded.rRangeFlag[3]){
  342  5                        IMDB_SendDoseRateExceeded(4);
  343  5                        ProcessDoseRateExceeded.rRangeFlag[3] = 1;
  344  5                      }
  345  4                    }
  346  3                    else{
  347  4                      if(ProcessDoseRateExceeded.rRangeFlag[3] == 1){
  348  5                        ProcessDoseRateExceeded.rRangeFlag[3] = 0;
  349  5                        IMDB_SendDoseRateExceeded(0);
  350  5                      }
  351  4                    }
  352  3                    /*
  353  3                    //–ø–æ—Ä–æ–≥ 5
  354  3                    if(outsideDoseRate > MainSettings.limitDetect[5]){
  355  3                      if(!ProcessDoseRateExceeded.rRangeFlag[4]){
C166 COMPILER V7.53.0.0, PROCESS                                                           12/14/2017 11:31:10 PAGE 7   

  356  3                        IMDB_SendDoseRateExceeded(6);
  357  3                        ProcessDoseRateExceeded.rRangeFlag[4] = 1;
  358  3                      }
  359  3                    }
  360  3                    else{
  361  3                      if(ProcessDoseRateExceeded.rRangeFlag[4] == 1){
  362  3                        ProcessDoseRateExceeded.rRangeFlag[4] = 0;
  363  3                        IMDB_SendDoseRateExceeded(0);
  364  3                      }
  365  3                    }
  366  3                    */
  367  3      
  368  3                    
  369  3                    //–≤—ã—Å—ã–ª–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ—Ä–æ–≥–∞ –ø–æ –î–æ–∑–µ
  370  3                    if(insideDose > MainSettings.limitDetect[6])
  371  3                      if(ProcessDoseExceeded.rRangeFlag[0] == 0){
  372  4                        ProcessDoseExceeded.rRangeFlag[0] = 1;
  373  4                          IMDB_SendDoseExceeded(1);
  374  4                      }
  375  3                      
  376  3                    if(insideDose > MainSettings.limitDetect[7])
  377  3                      if(ProcessDoseExceeded.rRangeFlag[1] == 0){
  378  4                        ProcessDoseExceeded.rRangeFlag[1] = 1;
  379  4                          IMDB_SendDoseExceeded(2);
  380  4                      }
  381  3                  
  382  3                    if(insideDose > MainSettings.limitDetect[8])
  383  3                      if(ProcessDoseExceeded.rRangeFlag[2] == 0){
  384  4                        ProcessDoseExceeded.rRangeFlag[2] = 1;
  385  4                          IMDB_SendDoseExceeded(3);
  386  4                      }
  387  3                    
  388  3                    if(insideDose > MainSettings.limitDetect[9])
  389  3                      if(ProcessDoseExceeded.rRangeFlag[3] == 0){
  390  4                        ProcessDoseExceeded.rRangeFlag[3] = 1;
  391  4                          IMDB_SendDoseExceeded(4);
  392  4                      }
  393  3                      
  394  3      
  395  3                
  396  3                
  397  3            }break;
  398  2            
  399  2            case IMDB_SPECTR_ACCUMULATION:
  400  2            {
  401  3      
  402  3                
  403  3            }break;
  404  2        }
  405  1        mainCounter++;
  406  1        waitCounter++;
  407  1        
  408  1        
  409  1        if(waitCounter >= WAIT_TIMEOUT){
  410  2          /*Process_IMDBStop();
  411  2          T0R = 0;
  412  2          System_LEDState(LED_BLINKY_LOW);
  413  2          */
  414  2        }
  415  1        
  416  1      }
  417         
C166 COMPILER V7.53.0.0, PROCESS                                                           12/14/2017 11:31:10 PAGE 8   

  418         void  Process_IMDBStart()
  419         {
  420  1        if(Process_GetBDGPState() == DEVICE_READY)
  421  1          BDGP_Start();
  422  1        if(Process_GetBDMGState() == DEVICE_READY)
  423  1          BDMG_Start();
  424  1        if(Process_GetBDPSStatus() == DEVICE_READY)
  425  1          BDSP_Start();
  426  1      }
  427         void  Process_IMDBStop()
  428         {
  429  1        BDGP_Stop();
  430  1        BDMG_Stop();  
  431  1        BDSP_Stop();
  432  1      }


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =        1282     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =          22     --------
  FAR-DATA SIZE    =    --------     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =          28     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
