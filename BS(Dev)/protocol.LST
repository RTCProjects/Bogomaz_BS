C166 COMPILER V7.53.0.0, PROTOCOL                                                          03/12/2018 15:40:22 PAGE 1   


C166 COMPILER V7.53.0.0, COMPILATION OF MODULE PROTOCOL
OBJECT MODULE PLACED IN .\output\protocol.obj
COMPILER INVOKED BY: C:\Keil\C166\BIN\C166.EXE protocol.c XLARGE BROWSE MOD167 DEBUG TABS(2) OBJECT(.\output\protocol.ob
                    -j) 

 stmt lvl     source

    1         #include "protocol.h"
    2         #include "asc0.h"
    3         #include "process.h"
    4         #include "settings.h"
    5         #include "devices.h"
    6         #include "system.h"
    7         
    8         #include "bdmg.h"
    9         #include "bdgp.h"
   10         #include "bdsp.h"
   11         
   12         #include "vers/vers.h"
   13         /*
   14         –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –ü–û UART –¥–ª—è —Å–≤—è–∑–∏ –ò–ù–ö-–
             -ë –ò–ú–î-–ë
   15         */
   16         #define INT_BUF_SIZE  128
   17         #define RCV_BUF_SIZE 512
   18         
   19         
   20         uint8 near interruptBuffer[INT_BUF_SIZE];
   21         uint8 receiveBuffer[RCV_BUF_SIZE];
   22         
   23         static uint32 readBufInd = 0;
   24         static uint32 writeBufInd = 0;
   25         int rIndex;
   26         
   27         float testMS = 0.0f;
   28         
   29         
   30         //const sServiceMsg ServiceMsg = {0x12,0x63,79511901};  //XX - FRM, YY - PRTCL, ZZZZZZZZ - Serial
   31         
   32         static sProtocolRequests  ProtocolRequests;
   33         static tMetrologyData     MetrologyData;
   34         static uint8 visualSpecBuf[1024]; //–º–∞—Å—Å–∏–≤ 1024 –±–∞–π—Ç–∞ –¥–ª—è 4—Ö 128 –∫–∞–Ω–∞–ª—å–Ω—ã—Ö —Å–ø–µ–
             -∫—Ç—Ä–æ–≤(–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –ò–ù–ö).
   35         
   36         __IO static uint32 cmdCnt;
   37         
   38         void IMDBProtocol_Init(void)
   39         {
   40  1        
   41  1        /*uint16  i = 0;
   42  1        
   43  1        for(i = 0;i<1024;i++)
   44  1          spectrArray[i] = i;
   45  1      
   46  1        spectrIndex = 0;*/
   47  1        testMS = 0;
   48  1        readBufInd = 0; //–∏–Ω–¥–µ–∫—Å –≤—Å—Ç–∞–≤–∫–∏ –≤ –±—É—Ñ–µ—Ä –∏–∑ UART
   49  1        writeBufInd = 0;
   50  1        rIndex = 0;
   51  1        cmdCnt = 0;
   52  1        memset((uint8*)&ProtocolRequests,0,sizeof(sProtocolRequests));
C166 COMPILER V7.53.0.0, PROTOCOL                                                          03/12/2018 15:40:22 PAGE 2   

   53  1        memset((uint8*)&MetrologyData,0,sizeof(tMetrologyData));
   54  1      
   55  1        memset(interruptBuffer,0,INT_BUF_SIZE);
   56  1        memset(receiveBuffer,0,RCV_BUF_SIZE);
   57  1        
   58  1      }
   59         
   60         //–§–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–∫–µ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –ò–ù–ö-–ö
   61         uint8 *IMDBProtocol_CreatePacket(uint8  cmd,uint8 *pData,uint8 dataSize,uint8 *packSize)
   62         {
   63  1        uint8 bufferSize = (uint8)(5 + dataSize);
   64  1        uint8 *pBuf = (uint8*)malloc(sizeof(uint8) * bufferSize);
   65  1        
   66  1        uint16  ks = 0,i = 0;
   67  1        
   68  1        if(pBuf)
   69  1        {
   70  2          pBuf[0] = 0x55;
   71  2          pBuf[1] = bufferSize;
   72  2          pBuf[2] = cmd;
   73  2          memcpy((pBuf + 3),pData,dataSize);
   74  2      
   75  2            for(i = 0;i<bufferSize - 2;i++)
   76  2              ks+=pBuf[i];
   77  2          
   78  2          memcpy((pBuf + (bufferSize - 2)),&ks,2);
   79  2          
   80  2          *packSize = bufferSize;
   81  2        
   82  2      
   83  2        }
   84  1        return pBuf;
   85  1      }
   86         
   87         /*
   88           pDataBuf      - —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä –¥–∞–Ω–Ω—ã—Ö
   89           sDataBuf      - —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
   90           pDataBufIndex - —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –∏—Ç–µ—Ä–∞—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞
   91           InputByte     - –±–∞–π—Ç –≤—Ö–æ–¥–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ UART
   92           packSize      - —Ä–∞–∑–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞
   93         */
   94         uint8 * IMDBProtocol_GetPacketFromStream(uint8 *pDataBuf,int sDataBuf, int  *pDataBufIndex, uint8 InputByte
             -, int *packSize)
   95         {
   96  1        int index;
   97  1        int i,ii;
   98  1        int ks = 0,pKS = 0;
   99  1        uint16 len;
  100  1      
  101  1        uint8 *pD;
  102  1        int iD = 0;
  103  1      
  104  1        if (sDataBuf<=0)  return 0;
  105  1          index = *pDataBufIndex;
  106  1        
  107  1         // —É–¥–∞–ª—è–µ–º –≤—Å–µ –¥–æ –±–∞–π—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  108  1        if ((index>0) && (pDataBuf[0]!=0x55)) {
  109  2          ii=0;
  110  2          while ((ii<index) && (pDataBuf[ii]!=0x55))  ii++;
  111  2          memcpy(&pDataBuf[0],&pDataBuf[ii],index-ii);
  112  2          index=index-ii;
  113  2        }
C166 COMPILER V7.53.0.0, PROTOCOL                                                          03/12/2018 15:40:22 PAGE 3   

  114  1        //–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ
  115  1        if(index >= sDataBuf)
  116  1        {
  117  2           memcpy(&pDataBuf[0],&pDataBuf[1],sDataBuf-1);
  118  2            index=sDataBuf-1;
  119  2          
  120  2           if ((index>0) && (pDataBuf[0]!=0x55)) {
  121  3            ii=0;
  122  3            while ((ii<index) && (pDataBuf[ii]!=0x55))  ii++;
  123  3            memcpy(&pDataBuf[0],&pDataBuf[ii],index-ii);
  124  3            index=index-ii;
  125  3          }
  126  2        }
  127  1        
  128  1      
  129  1      
  130  1      
  131  1        pDataBuf[index]=InputByte;
  132  1          index++;
  133  1            *pDataBufIndex=index;
  134  1        
  135  1        pD=(uint8* )pDataBuf;
  136  1        iD=index;
  137  1        
  138  1        while (1) {
  139  2           if (iD<5)  break;
  140  2          
  141  2            if(pD[0] == (uint8)0x55){
  142  3              len = (uint8)pD[1];
  143  3              
  144  3              if(iD>=len)
  145  3              {
  146  4                if(len>0){
  147  5                //pKS = (pD[len-2] << 8) | pD[len-1];
  148  5                pKS = (pD[len-1] << 8) | pD[len-2];
  149  5                  
  150  5                for(i = 0;i<len-2;i++)
  151  5                  ks+=pD[i];  //–ø–æ—Å—á–∏—Ç–∞–ª–∏ –ö–°
  152  5                
  153  5                  if(pKS == ks)
  154  5                  {
  155  6                    if(packSize)  *packSize = (len - 5);
  156  6                    
  157  6                      return (pD);
  158  6                  }
  159  5                }
  160  4              } 
  161  3              
  162  3            }
  163  2            pD++;
  164  2            iD--;
  165  2        }
  166  1        return 0;
  167  1        
  168  1      }
  169         //
  170         void IMDB_ReceiveByteCallback(uint8 inputByte)
  171         {
  172  1      
  173  1        interruptBuffer[(writeBufInd++)%INT_BUF_SIZE] = inputByte;
  174  1        /*if(writeBufInd == BUFFER_SIZE)writeBufInd = 0;
  175  1        interruptBuffer[writeBufInd] = inputByte;
C166 COMPILER V7.53.0.0, PROTOCOL                                                          03/12/2018 15:40:22 PAGE 4   

  176  1          writeBufInd++;
  177  1        */
  178  1      
  179  1        //rIntIndexBufIN &= (BUFFER_SIZE - 1);
  180  1        /*
  181  1        
  182  1        static uint8 *pPackage;
  183  1        static int sPackage;
  184  1         
  185  1          pPackage = IMDBProtocol_GetPacketFromStream(receiveBuffer,BUFFER_SIZE,(int*)&rIndex,inputByte,&sPackage)
             -;
  186  1            
  187  1          if(pPackage)
  188  1          {
  189  1            
  190  1            IMDB_PackageAnalysis(pPackage[2],sPackage,(uint8*)pPackage+3);
  191  1            rIndex = 0;
  192  1          }*/
  193  1      }
  194         sbit  P2_8    = P2^8;
  195         //–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–∏–Ω—è—Ç—ã—Ö –ø–æ UART,  –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥
  196         //void IMDB_ReceiveByteCallback(uint8 inputByte)
  197         void IMDB_ReceiveByteReading()
  198         {
  199  1        
  200  1        
  201  1        uint16  i = 0;
  202  1        uint8 *pPackage;
  203  1        uint8  inputByte;
  204  1        int sPackage;
  205  1        
  206  1        //P2_8 = 0;
  207  1        
  208  1        //inputByte = interruptBuffer[(readBufInd++)%BUFFER_SIZE];
  209  1        while(writeBufInd > readBufInd){
  210  2          //P2_8 = 1;
  211  2          /*
  212  2          if(readBufInd == BUFFER_SIZE)readBufInd = 0;
  213  2            inputByte = interruptBuffer[readBufInd];
  214  2          readBufInd++; 
  215  2          */
  216  2          inputByte = interruptBuffer[(readBufInd++)%INT_BUF_SIZE];
  217  2          
  218  2          pPackage = IMDBProtocol_GetPacketFromStream(receiveBuffer,RCV_BUF_SIZE,(int*)&rIndex,inputByte,&sPackage
             -);
  219  2          
  220  2        if(pPackage)
  221  2        {
  222  3          IMDB_PackageAnalysis(pPackage[2],sPackage,(uint8*)pPackage+3);
  223  3          rIndex = 0; 
  224  3        }
  225  2      }
  226  1        /*
  227  1        //–ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –±–∞–π—Ç—ã –∏–∑ –∫–æ–ª—å—Ü–µ–≤–æ–≥–æ –±—É—Ñ–µ—Ä–∞
  228  1        for(i = 0;i<BUFFER_SIZE;i++){
  229  1          inputByte = interruptBuffer[i];
  230  1          
  231  1          //–∫–æ—Ä–º–∏–º –Ω–∞ –≤—Ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—Å–µ –±–∞–π—Ç—ã –∏–∑ –ø—Ä–∏—ë–º–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞
  232  1          pPackage = IMDBProtocol_GetPacketFromStream(receiveBuffer,BUFFER_SIZE,(int*)&rIndex,inputByte,&sPackage)
             -;
  233  1          
  234  1          //–Ω–∞—à–ª–∏ –ø–∞–∫–µ—Ç
C166 COMPILER V7.53.0.0, PROTOCOL                                                          03/12/2018 15:40:22 PAGE 5   

  235  1          if(pPackage){
  236  1            cmdCnt++;
  237  1            
  238  1            //—É–¥–∞–ª–∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞
  239  1            memcpy((uint8*)interruptBuffer,(uint8*)(interruptBuffer + i),BUFFER_SIZE - i);
  240  1            rIndex = 0; 
  241  1            if(rIntIndexBufIN >= i)
  242  1              rIntIndexBufIN = rIntIndexBufIN - i;
  243  1            else
  244  1              rIntIndexBufIN = 0;
  245  1            
  246  1            IMDB_PackageAnalysis(pPackage[2],sPackage,(uint8*)pPackage+3);
  247  1            
  248  1            break;
  249  1          }
  250  1        }*/
  251  1      }
  252         
  253         void IMDB_PackageAnalysis(uint8 cmd,uint8 bytesCount,uint8  *pData)//–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç –æ—Ç
             - –ò–ù–ö
  254         {
  255  1        uint8 *pSpectr = 0;
  256  1        uint8 currentFeature = 0;
  257  1        float currentDose = 0;
  258  1        float Dose = 0;
  259  1        
  260  1        
  261  1        uint16  spectrIndex = 0;
  262  1        
  263  1        
  264  1        
  265  1        switch(cmd)
  266  1        {
  267  2          case INK_GET_STATE:
  268  2          {
  269  3            if(!ProtocolRequests.rState){
  270  4              ProtocolRequests.rState++;
  271  4              Process_ResetWaitCounter();
  272  4            }
  273  3            //IMDB_SendState();
  274  3          }break;
  275  2          
  276  2          case INK_SET_STATE:
  277  2          {
  278  3            /*Process_SetStatus(pData[0]);
  279  3            
  280  3            IMDB_SendState();*/
  281  3              //–ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
  282  3              switch(/*Process_GetOperationMode()*/pData[0] & 0x0F)
  283  3              {
  284  4                case IMDB_INITIALIZATION:{ System_Reset(); }break;                            //—Ä–µ–∂–∏–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏
             -–∏
  285  4                
  286  4                //—Ä–µ–∂–∏–º —à—Ç–∞—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
  287  4                case IMDB_FULLTIME_WORK:
  288  4                {
  289  5                    //–ø–æ–ª—É—á–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥ –≤ —à—Ç–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º
  290  5                    if(Process_GetBDMGState() == DEVICE_NOTREADY && Process_GetBDGPState() == DEVICE_NOTREADY && Proces
             -s_GetBDPSStatus() == DEVICE_NOTREADY){
  291  6                      IMDB_SendError();
  292  6                      return;
  293  6                    }
C166 COMPILER V7.53.0.0, PROTOCOL                                                          03/12/2018 15:40:22 PAGE 6   

  294  5                    else if(Process_GetBDPSStatus() == DEVICE_WAITING){
  295  6                      IMDB_SendError();
  296  6                      return;
  297  6                    }
  298  5                    else{
  299  6                      Process_SetStatus(pData[0]);
  300  6                      Process_IMDBStart();
  301  6                      //IMDB_SendState();
  302  6                    }
  303  5                
  304  5                  
  305  5                  
  306  5                }break;
  307  4                
  308  4                //–Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞
  309  4                case IMDB_BACKGROUND_ACCUMULATION:
  310  4                {
  311  5                  /*
  312  5                    –ü—Ä–∏–Ω—è–ª–∏ –∫–æ–º–∞–Ω–¥—É - –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞. –ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–≤–µ–¥–µ–Ω–∏—è 
             -–ü–û:
  313  5                      - –ï—Å–ª–∏ –ë–î–ì–ü-–° –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∏ –∑–∞—Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
  314  5                        1. –û–±–Ω—É–ª—è–µ–º —Ñ–æ–Ω–æ–≤—ã–π —Å–ø–µ–∫—Ç—Ä –ë–î–ì–ü-–°
  315  5                        2. –û–±–Ω—É–ª—è–µ–º —Ñ–ª–∞–≥ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
  316  5                        3. –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞
  317  5                      - –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
  318  5                        1. –û–±–Ω—É–ª—è–µ–º —Ñ–æ–Ω–æ–≤—ã–π —Å—á—ë—Ç –ë–î–ì–ü-–ë
  319  5                        2. –û–±–Ω—É–ª—è–µ–º —Ñ–ª–∞–≥ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
  320  5                        3. –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞
  321  5                  */
  322  5                  if(Process_GetBDPSStatus() == DEVICE_READY){
  323  6                    BDSP_ResetBackgroundData();
  324  6                    
  325  6                    Process_SetStatus(pData[0]);
  326  6                    Process_IMDBStart();
  327  6                  }
  328  5                  else if(Process_GetBDGPState() == DEVICE_READY){            
  329  6                    BDGP_ResetBackgroundData();
  330  6                    
  331  6                    Process_SetStatus(pData[0]);
  332  6                    Process_IMDBStart();
  333  6                  }
  334  5                  else
  335  5                    IMDB_SendError();
  336  5                  
  337  5                }break;
  338  4                          
  339  4                case IMDB_SETTINGS_MODE:
  340  4                {
  341  5                  if(Process_GetOperationMode() == IMDB_FULLTIME_WORK){
  342  6                    Process_IMDBStop();
  343  6                    Process_SetStatus(pData[0]);
  344  6                  }
  345  5                  else
  346  5                    IMDB_SendError();
  347  5                }break;
  348  4                
  349  4                case IMDB_SPECTR_ACCUMULATION:
  350  4                {
  351  5                  BDPS_ClearQuery();
  352  5                  Process_SetStatus(pData[0]);
  353  5                }break;
  354  4                
C166 COMPILER V7.53.0.0, PROTOCOL                                                          03/12/2018 15:40:22 PAGE 7   

  355  4                case IMDB_CALIBRATION_I:
  356  4                { 
  357  5                  //–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ò–ú–î–ë
  358  5                  Process_IMDBStop();
  359  5                    //–≤—ã–¥–µ—Ä–∂–∏–≤–∞–µ–º –ø–∞—É–∑—É –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø–∞–∫–µ—Ç–∞ –¥–∞–Ω–
             -Ω—ã—Ö
  360  5        
  361  5                  BDSP_StartCalbiration(0);
  362  5                  Process_SetStatus(pData[0]);
  363  5                }break;
  364  4                
  365  4                case IMDB_CALIBRATION_II:
  366  4                {
  367  5                  //–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ò–ú–î–ë
  368  5                  Process_IMDBStop();
  369  5                    //–≤—ã–¥–µ—Ä–∂–∏–≤–∞–µ–º –ø–∞—É–∑—É –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø–∞–∫–µ—Ç–∞ –¥–∞–Ω–
             -Ω—ã—Ö
  370  5      
  371  5                  BDSP_StartCalbiration(1);
  372  5                  Process_SetStatus(pData[0]);
  373  5                }break;
  374  4                
  375  4                case IMDB_CALIBRATION_III:
  376  4                {
  377  5                  //–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ò–ú–î–ë
  378  5                  Process_IMDBStop();
  379  5                    //–≤—ã–¥–µ—Ä–∂–∏–≤–∞–µ–º –ø–∞—É–∑—É –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø–∞–∫–µ—Ç–∞ –¥–∞–Ω–
             -Ω—ã—Ö
  380  5      
  381  5                  BDSP_StartCalbiration(2);
  382  5                  Process_SetStatus(pData[0]);
  383  5                }break;
  384  4                
  385  4                case IMDB_CALIBRATION_IV:
  386  4                {
  387  5                  //–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ò–ú–î–ë
  388  5                  Process_IMDBStop();
  389  5                    //–≤—ã–¥–µ—Ä–∂–∏–≤–∞–µ–º –ø–∞—É–∑—É –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø–∞–∫–µ—Ç–∞ –¥–∞–Ω–
             -Ω—ã—Ö
  390  5                  BDSP_StartCalbiration(3);
  391  5                  Process_SetStatus(pData[0]);
  392  5                }break;
  393  4                
  394  4                
  395  4              }
  396  3            
  397  3            //IMDB_SendState();
  398  3          }break;
  399  2          
  400  2          case INK_DATA_REQUEST:
  401  2          {
  402  3              switch(pData[0])
  403  3              {
  404  4                  case 0x01:  //–∑–∞–ø—Ä–æ—Å –ú–î —Å–Ω–∞—Ä—É–∂–∏
  405  4                  {
  406  5                    if(!ProtocolRequests.rOutsideDoseRate)
  407  5                      ProtocolRequests.rOutsideDoseRate++;
  408  5                    //IMDB_SendOutsideDoseRate();
  409  5                  }break;
  410  4                  
  411  4                  case 0x02: //–∑–∞–ø—Ä–æ—Å –ø—Ä–∏–∑–Ω–∞–∫–∞ –ú–î —Å–Ω–∞—Ä—É–∂–∏
  412  4                  {
C166 COMPILER V7.53.0.0, PROTOCOL                                                          03/12/2018 15:40:22 PAGE 8   

  413  5                    if(!ProtocolRequests.rOutsideFeature)
  414  5                      ProtocolRequests.rOutsideFeature++;
  415  5                    //IMDB_SendOutsideDoseFeature();
  416  5                  }break; 
  417  4                  
  418  4                  case 0x03: //–∑–∞–ø—Ä–æ—Å –ú–î –≤–Ω—É—Ç—Ä–∏
  419  4                  {
  420  5                    if(!ProtocolRequests.rInsideDoseRate)
  421  5                      ProtocolRequests.rInsideDoseRate++;
  422  5                    //IMDB_SendInsideDoseRate();
  423  5                  }break;
  424  4                  
  425  4                  case 0x04:  //–∑–∞–ø—Ä–æ—Å –ø—Ä–∏–∑–Ω–∞–∫–∞ –ú–î –≤–Ω—É—Ç—Ä–∏
  426  4                  {
  427  5                    if(!ProtocolRequests.rInsideFeature)
  428  5                      ProtocolRequests.rInsideFeature++;
  429  5                    //IMDB_SendInsideDoseFeature();
  430  5                  }break;
  431  4                  
  432  4                  case 0x05: //–∑–∞–ø—Ä–æ—Å –¥–æ–∑—ã –≤–Ω—É—Ç—Ä–∏
  433  4                  {
  434  5                    if(!ProtocolRequests.rInsideDose)
  435  5                      ProtocolRequests.rInsideDose++;
  436  5                    //IMDB_SendInsideDose();
  437  5                    
  438  5                  }break; 
  439  4                  case 0x06: //–∑–∞–ø—Ä–æ—Å —É–≥–ª–∞ –Ω–∞ –º–∞–∫—Å–∏–º—É–º 
  440  4                  {
  441  5                    if(!ProtocolRequests.rMaxAngle)
  442  5                      ProtocolRequests.rMaxAngle++;
  443  5                    //IMDB_SendMaxAngle();
  444  5                  } break;
  445  4                    
  446  4                  case 0x07: //–∑–∞–ø—Ä–æ—Å —É–≥–ª–æ–≤–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
  447  4                  {   
  448  5                    if(!ProtocolRequests.rAngularDistribution)
  449  5                      ProtocolRequests.rAngularDistribution++;
  450  5                  }break;
  451  4                  
  452  4                  case 0x08:  //–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
  453  4                  {
  454  5                    //IMDB_SendIdentification();
  455  5                  } break;
  456  4                  //–∑–∞–ø—Ä–æ—Å —Å–ø–µ–∫—Ç—Ä–∞
  457  4                  case 0x09:
  458  4                  {
  459  5                    spectrIndex = 0;
  460  5                    
  461  5                    pSpectr = (uint8*)BDSP_GetCurrentSpectr();
  462  5                    
  463  5                    do
  464  5                    {
  465  6                        IMDB_SendPacket(IMDB_SPECTR + spectrIndex,(uint8 *)(pSpectr + (spectrIndex * 128) ),128);
  466  6                    
  467  6      
  468  6                      spectrIndex++;
  469  6                      
  470  6                      _srvwdt_();
  471  6                    }
  472  5                    while(spectrIndex < SPECTR_SIZE / 64);
  473  5                    
  474  5                  }break;
C166 COMPILER V7.53.0.0, PROTOCOL                                                          03/12/2018 15:40:22 PAGE 9   

  475  4                  default: /*IMDB_SendPacket(IMDB_ERROR,0,0);*/ break;
  476  4              }
  477  3              
  478  3          }break;
  479  2          
  480  2          case INK_GET_SHIELDING_FACTOR: { IMDB_SendPacket(IMDB_SHIELDING_FACTOR,(uint8*)((uint32*)(&MainSettings.
             -shieldingFactor)),4);  }break;
  481  2          
  482  2          case INK_SET_SHIELDING_FACTOR:
  483  2          {
  484  3            memcpy(&MainSettings.shieldingFactor,pData,4);
  485  3              SETTINGS_Save();
  486  3            IMDB_SendPacket(IMDB_SHIELDING_FACTOR,(uint8*)((uint32*)(&MainSettings.shieldingFactor)),4);
  487  3          }break;
  488  2          
  489  2          case INK_SET_ACC_TIME:
  490  2          {
  491  3            memcpy(&MainSettings.accumulationTime,pData,2);
  492  3              SETTINGS_Save();
  493  3            IMDB_SendPacket(IMDB_SPECTRACC_TIME,(uint8*)((uint16*)(&MainSettings.accumulationTime)),2);
  494  3          }break;
  495  2          
  496  2          case INK_SET_LIMIT_DETECT:
  497  2          {
  498  3            memcpy((&MainSettings.limitDetect) + (pData[0] - 1),pData + 1,4);
  499  3            
  500  3            SETTINGS_Save();
  501  3            
  502  3            IMDB_SendPacket(IMDB_LIMIT_DETECT,(uint8*)pData,bytesCount);
  503  3          }break;
  504  2          
  505  2          case INK_START_MEASURE:
  506  2          {
  507  3            /*//–ø—Ä–∏–Ω—è–ª–∏ –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—É—Å–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π
  508  3            if(Process_GetBDPSStatus() == DEVICE_READY){
  509  3              BDSP_StartSpectrAccumulation(pData[0]);
  510  3              
  511  3              IMDB_SendPacket(IMDB_START_MEASURE,(uint8*)&pData[0],sizeof(uint8));
  512  3            }
  513  3            */
  514  3            IMDB_SendStartMeasureInPoint(pData[0]);
  515  3          }break;
  516  2          
  517  2          case INK_GET_FIRMWARE_INFO:
  518  2          {
  519  3            IMDB_SendPacket(IMDB_SERVICE,(uint8*)&ServiceMsg,sizeof(sServiceMsg));
  520  3          }break;
  521  2          
  522  2          case METROLOGY_READPARAM_REQUEST:
  523  2          {
  524  3            ProtocolRequests.rMetrologyReadBDParametrs++;
  525  3          }break;
  526  2          
  527  2          case METROLOGY_WRITEPARAM_REQUEST:
  528  2          {
  529  3            IMDB_Metrology_WriteBDParametrs(pData);
  530  3            ProtocolRequests.rMetrologyWriteBDParametrs++;
  531  3              //IMDB_Metrology_WriteBDParametrs(pData);
  532  3          }break;
  533  2          
  534  2          case METROLOGY_DEFAULT_SETTINGS_REQUEST:
  535  2          {
C166 COMPILER V7.53.0.0, PROTOCOL                                                          03/12/2018 15:40:22 PAGE 10  

  536  3            IMDB_Metrology_DefaultSettings();
  537  3          }break;
  538  2          
  539  2          case METROLOGY_READ_SETTINGS_REQUEST:
  540  2          {
  541  3            IMDB_Metrology_ReadBSParametrs();
  542  3          }break;
  543  2          
  544  2          case METROLOGY_WRITE_SETTINGS_REQUEST:
  545  2          {
  546  3            IMDB_Metrology_WriteBSParametrs(pData);
  547  3          }break;
  548  2          
  549  2          //–∫–æ–º–∞–Ω–¥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–æ–ª–æ–≥
             -–∏–∏
  550  2          case METROLOGY_STARTBD_REQUEST:
  551  2          {
  552  3            IMDB_Metrology_StartBD(pData);
  553  3          }break;
  554  2          
  555  2          //–∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ë–î
  556  2          case METROLOGY_DATA_REQUEST:
  557  2          {
  558  3            IMDB_Metrology_GetBDData();
  559  3          }break;
  560  2          
  561  2          //–≤–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤
  562  2          case METROLOGY_SPECTR_ACCUMMODE_REQUEST:
  563  2          {
  564  3            IMDB_Metrology_SpectrometryMode(pData);
  565  3          }break;
  566  2          
  567  2          case METROLOGY_SPECTR_ACCUMBLOCKDATA_REQUEST:
  568  2          {
  569  3            ProtocolRequests.rMetrologySendAccumSpectrBlock.requestFlag = 1;
  570  3              memcpy((uint8*)(&ProtocolRequests.rMetrologySendAccumSpectrBlock) + 1,pData,sizeof(uint8) * 5); 
  571  3              
  572  3            //IMDB_Metrology_SendAccumSpectrBlockData(pData);
  573  3          }break;
  574  2          
  575  2          default:
  576  2          {
  577  3            /*IMDB_SendPacket(IMDB_ERROR,0,0);*/
  578  3          }break;
  579  2          
  580  2        }
  581  1      }
  582         void IMDB_SendIdentification()
  583         {
  584  1          IMDB_SendPacket(IMDB_NUCLIDE_IDENTIFICATION,0,0);
  585  1      }
  586         
  587         void IMDB_SendState()
  588         {
  589  1        uint8 stateByte = Process_GetInfo();
  590  1          IMDB_SendPacket(IMDB_STATE,&stateByte,1);
  591  1      }
  592         void IMDB_SendReady()
  593         {
  594  1        uint8 stateByte = Process_GetInfo();
  595  1          //IMDB_SendPacket(IMDB_SEND_READY,&stateByte,1);
  596  1      }
C166 COMPILER V7.53.0.0, PROTOCOL                                                          03/12/2018 15:40:22 PAGE 11  

  597         
  598         void IMDB_SendInsideDose()
  599         {
  600  1        float Dose = 0;
  601  1        
  602  1        if(Process_GetBDMGState())
  603  1          Dose = BDMG_GetDose();
  604  1        else{
  605  2          if(MainSettings.shieldingFactor != 0){
  606  3            if(Process_GetBDPSStatus() == DEVICE_READY)
  607  3              Dose = BDSP_GetDose() / MainSettings.shieldingFactor;
  608  3            else
  609  3              Dose = BDGP_GetDose() / MainSettings.shieldingFactor;
  610  3            }
  611  2        }
  612  1        IMDB_SendPacket(IMDB_INSIDE_DOSE,(uint8*)((uint32*)&Dose),sizeof(float));
  613  1      }
  614         
  615         //–ø–æ–ª—É—á–∞–µ–º –ú–î —Å–Ω–∞—Ä—É–∂–∏
  616         void IMDB_SendOutsideDoseRate()
  617         {
  618  1        float doseRateVal = 0;
  619  1        
  620  1      
  621  1        if(Process_GetBDPSStatus() == DEVICE_READY)
  622  1          doseRateVal = BDSP_GetDoseRate();
  623  1        else{
  624  2          if(Process_GetBDGPState())
  625  2            doseRateVal = BDGP_GetAverageDoseRate();
  626  2          else
  627  2            doseRateVal = BDMG_GetCurrentDose() * MainSettings.shieldingFactor;
  628  2        }
  629  1        
  630  1        IMDB_SendPacket(IMDB_OUTSIDE_DOSE_RATE,(uint8*)((uint32*)(&doseRateVal)),sizeof(float));
  631  1      }
  632         //–ú–î –≤–Ω—É—Ç—Ä–∏
  633         void IMDB_SendInsideDoseRate()
  634         {
  635  1        float doseRateVal = 0;
  636  1          
  637  1        if(Process_GetBDMGState())
  638  1          doseRateVal = BDMG_GetCurrentDose();
  639  1        else
  640  1        {
  641  2          if(Process_GetBDPSStatus() == DEVICE_READY)
  642  2            doseRateVal = BDSP_GetDoseRate() / MainSettings.shieldingFactor;
  643  2          else
  644  2            doseRateVal = BDGP_GetAverageDoseRate() / MainSettings.shieldingFactor;
  645  2        }
  646  1        
  647  1        IMDB_SendPacket(IMDB_INSIDE_DOSE_RATE,(uint8*)((uint32*)(&doseRateVal)),sizeof(float));
  648  1      }
  649         /*
  650         –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–∞ –ú–î TO-DO –∏—Å–ø—Ä–∞–≤–∏—Ç—å –µ—Å–ª–∏ –ø–æ–¥–∫–ª—á—é–µ–Ω —Ç–æ–ª—å–∫–æ –
             -æ–¥–∏–Ω –±–ª–æ–∫
  651         */
  652         
  653         void  IMDB_SendInsideDoseFeature()
  654         {
  655  1        uint8 currentFeature = BDMG_GetInsideFeature();
  656  1        
  657  1          IMDB_SendPacket(IMDB_INSIDE_FEATURE,&currentFeature,sizeof(uint8));
C166 COMPILER V7.53.0.0, PROTOCOL                                                          03/12/2018 15:40:22 PAGE 12  

  658  1      }
  659         void  IMDB_SendOutsideDoseFeature()
  660         {
  661  1        uint8 currentFeature = BDGP_GetOutsideFeature();
  662  1          
  663  1          IMDB_SendPacket(IMDB_OUTSIDE_FEATURE,(uint8*)((uint32*)(&currentFeature)),sizeof(uint8));
  664  1      }
  665         void IMDB_SendMaxAngle()
  666         {
  667  1        float maxAngle = 0;
  668  1        
  669  1            if(Process_GetBDPSStatus() == DEVICE_READY)
  670  1              maxAngle = BDSP_GetMaximumAngle();
  671  1            else if(Process_GetBDGPState() == DEVICE_READY)
  672  1              maxAngle = BDGP_GetMaximumAngle();   
  673  1            else {
  674  2              IMDB_SendPacket(IMDB_ERROR,0,0);
  675  2              return;
  676  2            }
  677  1        
  678  1          IMDB_SendPacket(IMDB_RADIATION_DIRECT,(uint8*)((uint32*)(&maxAngle)),sizeof(float));
  679  1      }
  680         void IMDB_SendDoseExceeded(uint8  Number)
  681         {
  682  1        IMDB_SendPacket(IMDB_SEND_DOSE_EXCEEDED,&Number,sizeof(uint8));
  683  1      }
  684         void IMDB_SendDoseRateExceeded(uint8  Number) //–ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –ú–î
  685         {
  686  1        IMDB_SendPacket(IMDB_SEND_DOSE_RATE_EXCEEDED,&Number,sizeof(uint8));
  687  1        
  688  1      }
  689         void IMDB_SendNuclideDetection(eDetectionState  State)
  690         { 
  691  1        IMDB_SendPacket(IMDB_SEND_NUCLIDE_DETECTION,(uint8*)&State,sizeof(uint8));
  692  1      }
  693         void IMDB_SendNuclideIdentification(eNuclideNumber Nuclide)
  694         {
  695  1        IMDB_SendPacket(IMDB_SEND_NUCLIDE_IDENTIFICATION,(uint8*)&Nuclide,sizeof(uint8));
  696  1      }
  697         
  698         void IMDB_SendCanTransmitError(uint8  erNum)
  699         {
  700  1        IMDB_SendPacket(IMDB_CAN_ERROR,&erNum,sizeof(uint8));
  701  1      }
  702         void IMDB_SendMeasureInPointSuccess()
  703         {
  704  1        sSpecModeData CurrentSpecModeData = BDSP_GetMeasureInPointData();
  705  1        
  706  1        IMDB_SendPacket(IMDB_SEND_SPECTR_ACCUM_SUCCESS,(uint8*)&CurrentSpecModeData,sizeof(sSpecModeData));
  707  1      }
  708         
  709         void IMDB_SendPacket(uint8  cmd,uint8 *pData, int dataSize)
  710         {
  711  1        uint8 packSize = 0,i=0;
  712  1        uint8 *pPackage = IMDBProtocol_CreatePacket(cmd,pData,dataSize,&packSize);
  713  1        
  714  1        if(pPackage)
  715  1        {
  716  2          for(i = 0;i<packSize;i++)
  717  2            sendbyte(pPackage[i]);
  718  2          
  719  2          free(pPackage);
C166 COMPILER V7.53.0.0, PROTOCOL                                                          03/12/2018 15:40:22 PAGE 13  

  720  2        }
  721  1      }
  722         
  723         
  724         
  725         void  IMDB_SendAngularDistribution()
  726         { 
  727  1        float *fpData;
  728  1        
  729  1        //–µ—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ–∫—Ç—Ä–æ–º–µ—Ç—Ä–∞
  730  1        if(Process_GetBDPSStatus() == DEVICE_NOTREADY)
  731  1        {
  732  2          //–∏ –µ—Å—Ç—å –ë–î–ì–ü-–ë
  733  2          if( Process_GetBDGPState() == DEVICE_READY)
  734  2          {
  735  3            //–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω —Ñ–æ–Ω
  736  3            if(BDGP_GetBackgroundState()){
  737  4              //—Ä–∞—Å—Å—á—ë—Ç –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
  738  4                fpData = BDGP_GetAngularDiagram();//–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É —É–≥–ª–æ–≤–æ–≥–æ —Ä–∞—Å–ø
             -—Ä–µ–¥–µ–ª–µ–Ω–∏—è
  739  4                
  740  4                IMDB_SendPacket(IMDB_ANGULAR_DISTRIBUTION,(uint8*)fpData,sizeof(float) * 48);
  741  4            }
  742  3            else
  743  3              IMDB_SendPacket(IMDB_ERROR,0,0);
  744  3          }
  745  2          else
  746  2            IMDB_SendPacket(IMDB_ERROR,0,0);
  747  2        }
  748  1        //–æ–±–Ω–∞—Ä—É–∂–µ–Ω –≥–æ—Ç–æ–≤—ã–π –∏ –∑–∞—Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–µ–∫—Ç—Ä–æ–º–µ—Ç—Ä
  749  1        else if(Process_GetBDPSStatus() == DEVICE_READY)
  750  1        {
  751  2          if(BDSP_GetBackgroundReady()){
  752  3            BDSP_CalculateAngularDiagram(SIZE_128); //—Å–∏—á—Ç–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –¥–ª—è 128 –∫–∞–Ω–∞–ª—å–Ω–æ
             -–≥–æ
  753  3            
  754  3            fpData = BDSP_GetAngularDiagram();//–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É —É–≥–ª–æ–≤–æ–≥–æ —Ä–∞—Å–ø—Ä
             -–µ–¥–µ–ª–µ–Ω–∏—è
  755  3            if(fpData)
  756  3              IMDB_SendPacket(IMDB_ANGULAR_DISTRIBUTION,(uint8*)fpData,sizeof(float) * 48);
  757  3            else
  758  3              IMDB_SendPacket(IMDB_ERROR,0,0);
  759  3          }
  760  2          else
  761  2            IMDB_SendPacket(IMDB_ERROR,0,0);
  762  2        }
  763  1        else
  764  1          IMDB_SendPacket(IMDB_ERROR,0,0);
  765  1        
  766  1      
  767  1      }
  768         void IMDB_SendAccumSpectrSuccess(uint8  Channel)
  769         {
  770  1        IMDB_SendPacket(METROLOGY_SEND_ACCUMSPECTR_SUCCESS,(uint8*)&Channel,sizeof(uint8)); 
  771  1      }
  772         void IMDB_SendCalibrationState(eCalibrationStatus Status)
  773         {
  774  1        IMDB_SendPacket(IMDB_SEND_CALIBRATION_STATE,(uint8*)&Status,sizeof(uint8));
  775  1      }
  776         
  777         void  IMDB_Process()
  778         {
C166 COMPILER V7.53.0.0, PROTOCOL                                                          03/12/2018 15:40:22 PAGE 14  

  779  1      
  780  1        uint8 i = 0;
  781  1        uint8 BDMGReady = Process_GetBDMGState();
  782  1        uint8 BDGPReady = Process_GetBDGPState();
  783  1        uint8 BDSPReady = Process_GetBDPSStatus();
  784  1          if(BDSPReady == 2)
  785  1            BDSPReady = 1;
  786  1        
  787  1        
  788  1        IMDB_ReceiveByteReading();
  789  1        
  790  1        if(ProtocolRequests.rState){
  791  2          IMDB_SendState();
  792  2          ProtocolRequests.rState = 0;
  793  2        }
  794  1        
  795  1        if(ProtocolRequests.rOutsideDoseRate){
  796  2          IMDB_SendOutsideDoseRate();
  797  2          ProtocolRequests.rOutsideDoseRate = 0;
  798  2        }
  799  1        
  800  1        if(ProtocolRequests.rOutsideFeature){
  801  2          IMDB_SendOutsideDoseFeature();
  802  2          ProtocolRequests.rOutsideFeature = 0;
  803  2        }
  804  1        
  805  1        if(ProtocolRequests.rInsideDoseRate){
  806  2          IMDB_SendInsideDoseRate();
  807  2          ProtocolRequests.rInsideDoseRate = 0;
  808  2        }
  809  1        
  810  1        if(ProtocolRequests.rInsideFeature){
  811  2          IMDB_SendInsideDoseFeature();
  812  2          ProtocolRequests.rInsideFeature = 0;
  813  2        }
  814  1        
  815  1        if(ProtocolRequests.rInsideDose){
  816  2          IMDB_SendInsideDose();
  817  2          ProtocolRequests.rInsideDose = 0;
  818  2        }
  819  1        
  820  1        if(ProtocolRequests.rAngularDistribution){
  821  2          IMDB_SendAngularDistribution(); 
  822  2          ProtocolRequests.rAngularDistribution = 0;
  823  2        }
  824  1        
  825  1        if(ProtocolRequests.rMaxAngle){
  826  2          IMDB_SendMaxAngle();  
  827  2          ProtocolRequests.rMaxAngle = 0;
  828  2        }
  829  1        
  830  1        if(ProtocolRequests.rMetrologySendCurrentSpectrProcess){
  831  2          IMDB_Metrology_SendCurrentSpectrData();
  832  2        }
  833  1        
  834  1        if(ProtocolRequests.rMetrologySendAccumSpectrBlock.requestFlag){
  835  2          IMDB_Metrology_SendAccumSpectrBlockData((uint8*)(&ProtocolRequests.rMetrologySendAccumSpectrBlock) + 1);
  836  2          
  837  2          ProtocolRequests.rMetrologySendAccumSpectrBlock.requestFlag = 0;
  838  2        }
  839  1        
  840  1        //–ø—Ä–∏—à—ë–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ —á—Ç–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ –±–ª–æ–∫–æ–≤
C166 COMPILER V7.53.0.0, PROTOCOL                                                          03/12/2018 15:40:22 PAGE 15  

  841  1        if(ProtocolRequests.rMetrologyReadBDParametrs){
  842  2          IMDB_Metrology_AllBDParametrRequest();
  843  2            ProtocolRequests.rMetrologyReadBDParametrs = 0;
  844  2        }
  845  1        if(ProtocolRequests.rMetrologyWriteBDParametrs){
  846  2          IMDB_Metrology_AllBDWriteParametr();
  847  2          ProtocolRequests.rMetrologyWriteBDParametrs = 0;
  848  2        }
  849  1        
  850  1      
  851  1        //–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Ñ–ª–∞–≥–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  852  1        if(( ((!BDMGReady)||(BDMGReady && ProtocolRequests.rBDMGReadParametrsCallback)) &&
  853  1             ((!BDGPReady)||(BDGPReady && ProtocolRequests.rBDGPReadParametrsCallback)) &&
  854  1             ((!BDSPReady)||(BDSPReady && ProtocolRequests.rBDPSReadParametrsCallback))) && (BDMGReady || BDGPReady
             - || BDSPReady))
  855  1        {
  856  2          IMDB_Metrology_SendBDParametrs();
  857  2          IMDB_ResetAllBDSignalCallback();
  858  2        }
  859  1        
  860  1        
  861  1        //–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Ñ–ª–∞–≥–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  862  1        if( ( ((!BDMGReady)||(BDMGReady && ProtocolRequests.rBDMGWriteParametrsCallback)) &&
  863  1              ((!BDGPReady)||(BDGPReady && ProtocolRequests.rBDGPWriteParametrsCallback)) &&
  864  1              ((!BDSPReady)||(BDSPReady && ProtocolRequests.rBDPSWriteParametrsCallback))) && (BDMGReady || BDGPRea
             -dy || BDSPReady))
  865  1        {
  866  2          IMDB_SendPacket(METROLOGY_WRITEPARAM_RESPONSE,0,0);
  867  2          IMDB_ResetAllBDSignalCallback();
  868  2        } 
  869  1      
  870  1        
  871  1        
  872  1        //CALLBACK-–ò
  873  1        //–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
  874  1        if(ProtocolRequests.rNuclideDetectionCallback){
  875  2          IMDB_SendNuclideDetection(E_DETECTION_START);
  876  2          ProtocolRequests.rNuclideDetectionCallback = 0;
  877  2        }
  878  1        //–æ–∫–æ–Ω—á–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
  879  1        if(ProtocolRequests.rNuclideEndDetectionCallback){
  880  2          IMDB_SendNuclideDetection(E_DETECTION_END);
  881  2          ProtocolRequests.rNuclideEndDetectionCallback = 0;
  882  2        }
  883  1        //–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
  884  1        if(ProtocolRequests.rNuclideIdentificationCallback.requestFlag){
  885  2          IMDB_SendNuclideIdentification(ProtocolRequests.rNuclideIdentificationCallback.nuclideIndex);
  886  2          ProtocolRequests.rNuclideIdentificationCallback.requestFlag = 0;
  887  2        }
  888  1        //–æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
  889  1        if(ProtocolRequests.rNuclideIdentificationEndCallback){
  890  2          IMDB_SendNuclideIdentification(E_NO_NUCLIDE);
  891  2          ProtocolRequests.rNuclideIdentificationEndCallback = 0;
  892  2        }
  893  1        //–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤ —Ç–æ—á–∫–µ
  894  1        if(ProtocolRequests.rMeasureInPointEndCallback){
  895  2          IMDB_SendMeasureInPointSuccess();
  896  2          ProtocolRequests.rMeasureInPointEndCallback = 0;
  897  2        }
  898  1        
  899  1        for(i = 0;i<CHANNELS;i++)
  900  1        {
C166 COMPILER V7.53.0.0, PROTOCOL                                                          03/12/2018 15:40:22 PAGE 16  

  901  2          if(ProtocolRequests.rSpectrAccumChanSuccess[i]){
  902  3            IMDB_SendAccumSpectrSuccess(i);
  903  3            ProtocolRequests.rSpectrAccumChanSuccess[i] = 0;
  904  3            break;
  905  3          }
  906  2        }
  907  1      
  908  1        
  909  1      }
  910         /**********************************************************************************
  911         /**********************************************************************************
  912         *****************–§–£–ù–ö–¶–ò–ò –î–õ–Ø –£–°–¢–ê–ù–û–í–ö–ò –í –û–ß–ï–†–ï–î–¨ –°–û–û–ë–©–ï–ù–ò–ô –û–¢  –ò–ú–
             -î-–ë***************
  913         **********************************************************************************
  914         **********************************************************************************/
  915         void  IMDB_ResetAllBDSignalCallback()
  916         {
  917  1        ProtocolRequests.rBDMGReadParametrsCallback = 0;
  918  1        ProtocolRequests.rBDGPReadParametrsCallback = 0;
  919  1        ProtocolRequests.rBDPSReadParametrsCallback = 0;
  920  1        
  921  1        ProtocolRequests.rBDMGWriteParametrsCallback = 0;
  922  1        ProtocolRequests.rBDGPWriteParametrsCallback = 0;
  923  1        ProtocolRequests.rBDPSWriteParametrsCallback = 0;
  924  1      }
  925         
  926         void  IMDB_BDMGGetParametrsSignalCallback()
  927         {
  928  1        ProtocolRequests.rBDMGReadParametrsCallback = 1;
  929  1      }
  930         
  931         void  IMDB_BDGPGetParametrsSignalCallback()
  932         {
  933  1        ProtocolRequests.rBDGPReadParametrsCallback = 1;
  934  1      }
  935         
  936         void  IMDB_BDPSGetParametrsSignalCallback()
  937         {
  938  1        ProtocolRequests.rBDPSReadParametrsCallback = 1;
  939  1      }
  940         
  941         void  IMDB_BDPSWriteParametrsSignalCallback()
  942         {
  943  1        ProtocolRequests.rBDPSWriteParametrsCallback = 1;
  944  1      }
  945         
  946         void  IMDB_BDGPWriteParametrsSignalCallback()
  947         {
  948  1        ProtocolRequests.rBDGPWriteParametrsCallback = 1;
  949  1      }
  950         
  951         void  IMDB_BDMGWriteParametrsSignalCallback()
  952         {
  953  1        ProtocolRequests.rBDMGWriteParametrsCallback = 1;
  954  1      }
  955         
  956         void IMDB_NuclideDetectionSignalCallback()
  957         {
  958  1        ProtocolRequests.rNuclideDetectionCallback = 1;
  959  1      }
  960         void IMDB_NuclideEndDetectionSignalCallback()
  961         {
C166 COMPILER V7.53.0.0, PROTOCOL                                                          03/12/2018 15:40:22 PAGE 17  

  962  1        ProtocolRequests.rNuclideEndDetectionCallback = 1;
  963  1      }
  964         void IMDB_SendAccumSpectrSuccessSignalCallback(uint8  Channel)
  965         {
  966  1        ProtocolRequests.rSpectrAccumChanSuccess[Channel] = 1;
  967  1      }
  968         void  IMDB_NuclideIdentificationSignalCallback(uint8  Nuclide)
  969         {
  970  1        ProtocolRequests.rNuclideIdentificationCallback.requestFlag = 1;
  971  1        ProtocolRequests.rNuclideIdentificationCallback.nuclideIndex = Nuclide;
  972  1      }
  973         void  IMDB_NuclideIdentificationEndSignalCallback()
  974         {
  975  1        ProtocolRequests.rNuclideIdentificationEndCallback = 1;
  976  1      }
  977         
  978         void IMDB_SendMeasureInPointEndSignalCallback()
  979         {
  980  1        ProtocolRequests.rMeasureInPointEndCallback = 1;
  981  1      }
  982         
  983         /**********************************************************************************
  984         /**********************************************************************************
  985         *****************–§–£–ù–ö–¶–ò–ò –î–õ–Ø –ú–ï–¢–†–û–õ–û–ì–ò–ß–ï–°–ö–û–ì–û –ü–†–û–¢–û–ö–û–õ–ê****************
             -************
  986         **********************************************************************************
  987         **********************************************************************************/
  988         void IMDB_Metrology_AllBDParametrRequest()
  989         {
  990  1        /*
  991  1        –ê–ª–≥–æ—Ä–∏—Ç–º –∑–∞–ø—Ä–æ—Å–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç –±–ª–æ–∫–æ–≤ –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  992  1        */
  993  1        
  994  1        //–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç –ë–î
  995  1        if(Process_GetBDMGState() == DEVICE_READY){
  996  2          BDMG_ParametrRequest(0x94,0);//–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –æ—Å—Ç–∞–ª—å–Ω—ã–µ 
             -–≤—ã–¥–∞—é—Ç—Å—è –ø–æ —Ü–µ–ø–æ—á–∫–µ
  997  2        }
  998  1        if(Process_GetBDGPState() == DEVICE_READY){
  999  2          BDGP_ParametrRequest(1,0x93,0);//–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –æ—Å—Ç–∞–ª—å–Ω—ã–
             -µ –≤—ã–¥–∞—é—Ç—Å—è –ø–æ —Ü–µ–ø–æ—á–∫–µ
 1000  2        }
 1001  1        //—Å–ø–µ–∫—Ç—Ä–æ–º–µ—Ç—Ä –ª–∏–±–æ –≥–æ—Ç–æ–≤ –ª–∏–±–æ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è
 1002  1        if(Process_GetBDPSStatus() != DEVICE_NOTREADY){
 1003  2          //—Ç—É—Ç –∑–∞–ø—Ä–æ—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–ø–µ–∫—Ç—Ä–æ–º–µ—Ç—Ä–∞
 1004  2          BDSP_ParametrRequests();
 1005  2        }
 1006  1      }
 1007         void IMDB_Metrology_AllBDWriteParametr()
 1008         {
 1009  1        //–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç –ë–î
 1010  1        if(Process_GetBDMGState() == DEVICE_READY){
 1011  2          BDMG_StartWritingParametrs();
 1012  2          
 1013  2          System_Delay(100000);
 1014  2        }
 1015  1        if(Process_GetBDGPState() == DEVICE_READY){
 1016  2          BDGP_StartWritingParametrs(0);
 1017  2          System_Delay(100000);
 1018  2        }
 1019  1        //—Å–ø–µ–∫—Ç—Ä–æ–º–µ—Ç—Ä –ª–∏–±–æ –≥–æ—Ç–æ–≤ –ª–∏–±–æ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è
 1020  1        if(Process_GetBDPSStatus() != DEVICE_NOTREADY){
C166 COMPILER V7.53.0.0, PROTOCOL                                                          03/12/2018 15:40:22 PAGE 18  

 1021  2          //—Ç—É—Ç –∑–∞–ø—Ä–æ—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–ø–µ–∫—Ç—Ä–æ–º–µ—Ç—Ä–∞
 1022  2          BDSP_StartWritingParametrs();
 1023  2          
 1024  2        }
 1025  1      }
 1026         
 1027         void IMDB_Metrology_SendBDParametrs()
 1028         {
 1029  1        
 1030  1        
 1031  1        uint16  sizeBDMGParam = sizeof(tBDMGParametrs);
 1032  1        uint16  sizeBDGPParam = sizeof(tBDGPParametrs);
 1033  1        uint16  sizeBDSPParam = sizeof(tBDSPParametrs);
 1034  1        
 1035  1        uint8   *pParamPack;
 1036  1        uint16  PackSize = sizeBDMGParam + sizeBDGPParam * 2 + sizeBDSPParam;
 1037  1      
 1038  1          pParamPack = (uint8*)malloc(PackSize);
 1039  1        
 1040  1          if(pParamPack){
 1041  2            memcpy(pParamPack,BDMG_GetParametrs(),sizeBDMGParam);
 1042  2            memcpy(pParamPack + sizeBDMGParam,BDGP_GetParametrs(),sizeBDGPParam * 2);
 1043  2            memcpy(pParamPack + sizeBDMGParam + sizeBDGPParam * 2,BDSP_GetParametrs(),sizeBDSPParam);
 1044  2            
 1045  2            IMDB_SendPacket(METROLOGY_READPARAM_RESPONSE,pParamPack,PackSize);
 1046  2            
 1047  2          
 1048  2            free(pParamPack);
 1049  2          }
 1050  1      
 1051  1        
 1052  1      }
 1053         //–∑–∞–ø–∏—Å—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–µ—Ç—Ä–æ–ª–æ–≥–∏–∏
 1054         void IMDB_Metrology_WriteBDParametrs(uint8  *pData)
 1055         {
 1056  1        uint16  sizeBDMGParam = sizeof(tBDMGParametrs);
 1057  1        uint16  sizeBDGPParam = sizeof(tBDGPParametrs);
 1058  1        uint16  sizeBDSPParam = sizeof(tBDSPParametrs);
 1059  1        
 1060  1        if(pData)
 1061  1        {
 1062  2          memcpy(BDMG_GetParametrs(),pData,sizeBDMGParam);
 1063  2          memcpy(BDGP_GetParametrs(),pData + sizeBDMGParam,sizeBDGPParam * 2);
 1064  2          memcpy(BDSP_GetParametrs(),pData + sizeBDMGParam + sizeBDGPParam * 2,sizeBDSPParam);
 1065  2        }
 1066  1        else
 1067  1          IMDB_SendPacket(IMDB_ERROR,0,0);
 1068  1        
 1069  1      }
 1070         void  IMDB_Metrology_DefaultSettings()
 1071         {
 1072  1        SETTINGS_Default();
 1073  1        IMDB_SendPacket(METROLOGY_DEFAULT_SETTINGS_RESPONSE,0,0);
 1074  1        
 1075  1        System_Reset();
 1076  1      }
 1077         //—á—Ç–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ –ë–°
 1078         void  IMDB_Metrology_ReadBSParametrs()
 1079         {
 1080  1        IMDB_SendPacket(METROLOGY_READ_SETTINGS_RESPONSE,(uint8*)&MainSettings,sizeof(tSettings));
 1081  1      }
 1082         void IMDB_Metrology_WriteBSParametrs(uint8  *pData)
C166 COMPILER V7.53.0.0, PROTOCOL                                                          03/12/2018 15:40:22 PAGE 19  

 1083         {
 1084  1        uint8 i = 0;
 1085  1        
 1086  1        if(pData)
 1087  1        {
 1088  2          memcpy((uint8*)&MainSettings,(uint8*)pData,sizeof(tSettings));
 1089  2          
 1090  2          
 1091  2          SETTINGS_Save();
 1092  2          IMDB_SendPacket(METROLOGY_WRITE_SETTINGS_RESPONSE,0,0);
 1093  2        }
 1094  1        else
 1095  1          IMDB_SendPacket(IMDB_ERROR,0,0);
 1096  1      }
 1097         void IMDB_SendError()
 1098         {
 1099  1        IMDB_SendPacket(IMDB_ERROR,0,0);
 1100  1      }
 1101         void  IMDB_SendStartMeasureInPoint(uint8  PointNumber)
 1102         {
 1103  1        if(Process_GetBDPSStatus() == DEVICE_READY)
 1104  1        {
 1105  2          if(PointNumber == 1 || PointNumber == 2){     
 1106  3            Process_SetStatus(IMDB_SPECTR_ACCUMULATION);
 1107  3              BDSP_SetMeasureNumber(PointNumber);
 1108  3              BDSP_StartSpectrAccumulation(ACCUM_AND_MEASURE);
 1109  3            
 1110  3            IMDB_SendPacket(IMDB_START_MEASURE,(uint8*)&PointNumber,sizeof(uint8));
 1111  3          }
 1112  2          else
 1113  2            IMDB_SendError();
 1114  2        }
 1115  1        else
 1116  1          IMDB_SendError();
 1117  1      }
 1118         
 1119         void IMDB_Metrology_StartBD(uint8 *pData)
 1120         {
 1121  1        /*
 1122  1        1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ –∫–∞–∫–æ–º —Ä–µ–∂–∏–º–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ò–ú–î–ë, –µ—Å–ª–∏ –Ω–µ –≤ —à—Ç–∞—Ç–
             -Ω–æ–º –∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, —Ç–æ —à–ª—ë–º –µ—Ä—Ä–æ—Ä
 1123  1            –µ—Å–ª–∏ –≤ —à—Ç–∞—Ç–Ω–æ–º, —Ç–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–
             -∞ –Ω–∞–¥–∏—á–∏–µ –ë–î
 1124  1          1 - –ë–î–ì–ü-–°
 1125  1          2 - –ë–î–ì–ü-–ë I
 1126  1          3 - –ë–î–ì–ü-–ë II
 1127  1          4 - –ë–î–ú–ì-–ë I
 1128  1          5 - –ë–î–ú–ì-–ë II
 1129  1          6 - –ë–î–ú–ì-–ë III
 1130  1        */
 1131  1        uint8 bdIndex = pData[0]; //–ø–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –ë–î
 1132  1        
 1133  1        if(bdIndex > 0 && bdIndex < 7){
 1134  2          //–ø—Ä–∏ –ø—Ä–∏—ë–º–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –±–ª–æ–∫–∏
 1135  2          Process_IMDBStop();
 1136  2          //–∑–∞–ø–æ–º–∏–Ω–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ë–î
 1137  2          MetrologyData.rangeIndex = bdIndex; 
 1138  2          
 1139  2          if(Process_GetOperationMode() == IMDB_FULLTIME_WORK)  //–º–µ—Ç—Ä–æ–ª–æ–≥–∏—è –≤ —Ä–µ–∂–∏–º–µ –Ω–∞—Å—Ç—Ä–æ
             -–π–∫–∏
 1140  2          {
 1141  3            switch(bdIndex)
C166 COMPILER V7.53.0.0, PROTOCOL                                                          03/12/2018 15:40:22 PAGE 20  

 1142  3            {
 1143  4              case 1:BDSP_Start();break;
 1144  4              case 2:BDGP_ForcedStart(2);break;
 1145  4              case 3:BDGP_ForcedStart(3);break;
 1146  4              case 4:BDMG_ForcedStart(1);break;
 1147  4              case 5:BDMG_ForcedStart(2);break;
 1148  4              case 6:BDMG_ForcedStart(3);break;
 1149  4              
 1150  4            }
 1151  3            
 1152  3      
 1153  3            
 1154  3            IMDB_SendPacket(METROLOGY_STARTBD_RESPONSE,(uint8*)&bdIndex,sizeof(uint8));
 1155  3          }
 1156  2          else
 1157  2            IMDB_SendError();
 1158  2        }
 1159  1        else
 1160  1          IMDB_SendError();
 1161  1        
 1162  1      }
 1163         void IMDB_Metrology_GetBDData()
 1164         {
 1165  1          if(MetrologyData.rangeIndex == 1)
 1166  1          {
 1167  2            //—Å—á–∏—Ç–∞–µ–º —É–≥–æ–ª
 1168  2            BDSP_CalculateAngularDiagram(SIZE_128);
 1169  2            
 1170  2            MetrologyData.doseRate = BDSP_GetDoseRate();
 1171  2            MetrologyData.currentAngle = (uint16)BDSP_GetMaximumAngle();
 1172  2          }
 1173  1          if(MetrologyData.rangeIndex == 2 || MetrologyData.rangeIndex == 3)
 1174  1          {
 1175  2            BDGP_GetAngularDiagram();
 1176  2              MetrologyData.doseRate = BDGP_GetCurrentDoseRate();
 1177  2              MetrologyData.currentAngle = (uint16)BDGP_GetMaximumAngle();
 1178  2          }
 1179  1          if(MetrologyData.rangeIndex == 4 || MetrologyData.rangeIndex == 5 || MetrologyData.rangeIndex == 6)
 1180  1          {
 1181  2            MetrologyData.doseRate = BDMG_GetCurrentDose();
 1182  2            MetrologyData.currentAngle = 0;
 1183  2          }
 1184  1        
 1185  1      
 1186  1        
 1187  1        IMDB_SendPacket(METROLOGY_DATA_RESPONSE,(uint8*)&MetrologyData,sizeof(tMetrologyData));
 1188  1        
 1189  1      }
 1190         void  IMDB_Metrology_SpectrometryMode(uint8 *pData)
 1191         {
 1192  1        /*
 1193  1        –ü–æ–ª—É—á–∏–ª–∏ –∫–æ–º–∞–Ω–¥—É –Ω–∞ –ø–µ—Ä–µ–¥–∞—á—É/–Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ —Å–ø–µ–∫—Ç—Ä–æ–≤
 1194  1        */
 1195  1        switch(pData[0])
 1196  1        {
 1197  2          case 0:{
 1198  3            
 1199  3            
 1200  3            Process_SetStatus(IMDB_FULLTIME_WORK);
 1201  3                  
 1202  3              ProtocolRequests.rMetrologySendCurrentSpectr = 0;
 1203  3            
C166 COMPILER V7.53.0.0, PROTOCOL                                                          03/12/2018 15:40:22 PAGE 21  

 1204  3            IMDB_SendPacket(METROLOGY_SPECTR_ACCUMMODE_RESPONSE,(uint8*)pData,3);
 1205  3          }break; //–æ—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
 1206  2          
 1207  2          case 1:{
 1208  3            Process_SetStatus(IMDB_FULLTIME_WORK);
 1209  3              ProtocolRequests.rMetrologySendCurrentSpectr = 1; //—Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–µ–∫—Ç—
             -Ä–æ–≤ 4—Ö —Å–ø–µ–∫—Ç—Ä–æ–≤ –ø–æ 128 –∫–∞–Ω–∞–ª–∞–º
 1210  3              ProtocolRequests.rMetrologySendCurrentSpectrProcess = 1;
 1211  3            
 1212  3            IMDB_SendPacket(METROLOGY_SPECTR_ACCUMMODE_RESPONSE,(uint8*)pData,3);
 1213  3          }break;
 1214  2          
 1215  2          case 2:{
 1216  3            Process_SetStatus(IMDB_SPECTR_ACCUMULATION);
 1217  3            ProtocolRequests.rMetrologySendCurrentSpectr = 0; 
 1218  3            
 1219  3              MainSettings.accumulationTime = (uint16) (pData[2]<<8)|pData[1];
 1220  3              BDSP_StartSpectrAccumulation(ACCUM_ONLY);
 1221  3            
 1222  3            IMDB_SendPacket(METROLOGY_SPECTR_ACCUMMODE_RESPONSE,(uint8*)pData,3);
 1223  3          }break;
 1224  2          
 1225  2          default: IMDB_SendError(); break;
 1226  2        }
 1227  1      }
 1228         
 1229         void  IMDB_Metrology_SendCurrentSpectrData()
 1230         {
 1231  1      
 1232  1        uint16  spectrIndex = 0;
 1233  1        
 1234  1        //–µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–µ—Ä–µ–¥–∞—á—É —Å–ø–µ–∫—Ç—Ä–∞ —Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü
             -–∏–∏
 1235  1        if(!ProtocolRequests.rMetrologySendCurrentSpectr)
 1236  1          return;
 1237  1        
 1238  1        ProtocolRequests.rMetrologySendCurrentSpectrProcess = 0;
 1239  1        
 1240  1        //visualSpecBuf = (uint8*)malloc(sizeof(uint16) * 128 * 4);
 1241  1        
 1242  1        //if(visualSpecBuf)
 1243  1        {
 1244  2        //  memset((uint8*)visualSpecBuf,0,sizeof(uint8) * SPECTR_SIZE);
 1245  2        
 1246  2          
 1247  2          
 1248  2          memcpy( visualSpecBuf,       (uint16*)BDSP_DEBUG_GetQuerySumSpectr(0),sizeof(uint16) * 128);
 1249  2          memcpy((visualSpecBuf + 256),(uint16*)BDSP_DEBUG_GetQuerySumSpectr(1),sizeof(uint16) * 128);
 1250  2          memcpy((visualSpecBuf + 512),(uint16*)BDSP_DEBUG_GetQuerySumSpectr(2),sizeof(uint16) * 128);
 1251  2          memcpy((visualSpecBuf + 768),(uint16*)BDSP_DEBUG_GetQuerySumSpectr(3),sizeof(uint16) * 128);
 1252  2          
 1253  2          
 1254  2          spectrIndex = 0;
 1255  2          
 1256  2                      do
 1257  2                      {
 1258  3                        IMDB_SendPacket(0xF0 + spectrIndex,(uint8 *)(visualSpecBuf + (spectrIndex * 128) ),128);
 1259  3      
 1260  3                        spectrIndex++;
 1261  3                        
 1262  3                        _srvwdt_();
 1263  3                      }
C166 COMPILER V7.53.0.0, PROTOCOL                                                          03/12/2018 15:40:22 PAGE 22  

 1264  2                      while(spectrIndex < 8);
 1265  2                      
 1266  2          
 1267  2        }
 1268  1        ProtocolRequests.rMetrologySendCurrentSpectrProcess = 1;
 1269  1                    
 1270  1      }
 1271         void  IMDB_Metrology_SendAccumSpectrBlockData(uint8 *pData)
 1272         {
 1273  1        uint8 i = 0;
 1274  1        
 1275  1        uint8   *pSendData;
 1276  1        uint8   Channel = pData[0]; //–Ω–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞
 1277  1        
 1278  1        uint16  Start = (uint16)(pData[2] << 8)|pData[1]; //–Ω–∞—á–∞–ª—å–Ω–π—ã–π –∏–Ω–¥–µ–∫—Å —Å–ø–µ–∫—Ç—Ä–∞
 1279  1        uint16  Count = (uint16)(pData[4] << 8)|pData[3];   //–∫–æ–ª-–≤–æ —Å–ø–µ–∫—Ç—Ä–æ–≤
 1280  1      
 1281  1        
 1282  1        if(Channel >= 0 && Channel < 4){
 1283  2          if(Start >= 0 && Start < 1024){
 1284  3            if(Count > 0 && Count < 62){
 1285  4              if((Start + Count) <= 1024){
 1286  5              uint8 *pSpectrData = BDSP_GetAccumulationSpectr(Channel);
 1287  5              
 1288  5                  pSendData = (uint8*)malloc(sizeof(uint32) * Count + sizeof(uint8) * 5);
 1289  5      
 1290  5                  memcpy((uint8*)pSendData,(uint8*)pData,sizeof(uint8) * 5);
 1291  5                  memcpy((uint8*)(pSendData+5),pSpectrData + (Start * 4),sizeof(uint32) * Count);
 1292  5      
 1293  5                  
 1294  5      
 1295  5                  IMDB_SendPacket(METROLOGY_SPECTR_ACCUMBLOCKDATA_RESPONSE,pSendData,sizeof(uint32) * Count + sizeof(u
             -int8) * 5);
 1296  5                  //IMDB_SendError();
 1297  5                  free(pSendData);
 1298  5              
 1299  5              }
 1300  4              else
 1301  4                IMDB_SendError();
 1302  4            }
 1303  3            else
 1304  3              IMDB_SendError();
 1305  3          }
 1306  2          else
 1307  2            IMDB_SendError();
 1308  2        }
 1309  1        else
 1310  1          IMDB_SendError();   
 1311  1      }
 1312         
 1313         /**********************************************************************************
 1314         /**********************************************************************************
 1315         **********************–§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–¢–õ–ê–î–û–ß–ù–û–ì–û –ü–†–û–¢–û–ö–û–õ–ê*********************
             -*******
 1316         **********************************************************************************
 1317         **********************************************************************************/
 1318         void  IMDB_DEBUG_SendDataMsg(uint8  *pData,uint8  Index,uint8 DataType)
 1319         {
 1320  1        #ifdef DEBUG_MSG_ENABLE
 1321  1          uint8 pSendData[6];
 1322  1          
 1323  1            pSendData[0] = Index;
C166 COMPILER V7.53.0.0, PROTOCOL                                                          03/12/2018 15:40:22 PAGE 23  

 1324  1            pSendData[1] = DataType;
 1325  1            
 1326  1          memcpy((uint8*)(pSendData + 2),(uint8*)pData,sizeof(float));
 1327  1          
 1328  1          IMDB_SendPacket(IMDB_DEBUG_DATA_MSG,pSendData,sizeof(uint8) *6);
 1329  1        #endif
 1330  1      }
 1331         


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =        6150     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =         146     --------
  FAR-DATA SIZE    =    --------     --------
  XHUGE-DATA SIZE  =        1580     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =          24     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
