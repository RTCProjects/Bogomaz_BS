C166 COMPILER V7.53.0.0, BDSP                                                              10/31/2017 16:48:58 PAGE 1   


C166 COMPILER V7.53.0.0, COMPILATION OF MODULE BDSP
OBJECT MODULE PLACED IN .\output\bdsp.obj
COMPILER INVOKED BY: C:\Keil\C166\BIN\C166.EXE bdsp.c XLARGE BROWSE MOD167 DEBUG TABS(2) OBJECT(.\output\bdsp.obj) 

 stmt lvl     source

    1         #include "bdsp.h"
    2         #include "can.h"
    3         #include "process.h"
    4         #include "protocol.h"
    5         #include "settings.h"
    6         #include "system.h"
    7         
    8         #include "bdgp.h"
    9         
   10         
   11         
   12         const uint8 mResetBDSP[] = {0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00};
   13         const uint8 mStartBDSP[] = {0x07,0x01,0x00,0x00,0x00,0x00,0x00,0x00};
   14         const uint8 mStopBDSP[] = {0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
   15         
   16         const uint8 mSpectrSize1024[] = {0x02,0x05,0x00,0x01,0x00,0x00,0x00,0x00};  //128
   17         const uint8 mSpectrSize128[] = {0x02,0x05,0x00,0x04,0x00,0x00,0x00,0x00}; //128
   18         
   19         const uint8 mSpectrDoseRateOn[] = {0x02,0x07,0x00,0x01,0x00,0x00,0x00,0x00};
   20         
   21         const uint8 mSpectrGetAlignFctr[] = {0x04,0x08,0x00,0x00,0x00,0x00,0x00,0x00};
   22         const uint8 mSpectrGetDeadTime[] = {0x04,0x09,0x00,0x00,0x00,0x00,0x00,0x00};
   23         const uint8 mSpectrGetCorrFctr[] = {0x04,0x10,0x00,0x00,0x00,0x00,0x00,0x00};
   24         const uint8 mSpectrStartCalibration[] = {0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
   25         
   26         static uint8  NuclideDetection = 0;
   27         static uint8  NuclideIdentification = 0;
   28         static uint8  channelStartCnt = 0;  //—Å—á—ë—Ç—á–∏–∫ –≤–∫–ª—é—á–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
   29         static uint16 radiationMaximum = 0;     //—É–≥–æ–ª –Ω–∞ –º–∞–∫—Å–∏–º—É–º 
   30         
   31         
   32         static  tBDSPData           BDSPData[CHANNELS]; //–∫–∞–Ω–∞–ª—ã —Å–ø–µ–∫—Ç—Ä–æ–º–µ—Ç—Ä–∞
   33         static  eSpecMode           BDPSChannelSize;
   34         static  sSpecModeData       MeasureInPntData;
   35         static  eSpecAccumMode      BDSPAccumMode;
   36         
   37         static  tBDSPParametrs      near BDSPParametrs;
   38         
   39         static  float               fQuantileArray[SPECTR_SIZE];
   40         static  float               fAccumAverageDoseRate;
   41         static uint8    rWritingParametrRequest;
   42         static  float               fBackgroundIntergal;  //–∏–Ω—Ç–µ–≥—Ä–∞–ª –ø–æ —Ñ–æ–Ω—É
   43         
   44         static uint16               iJIndexNuclideIdentification; //–∏–Ω–¥–µ–∫—Å –æ–∫–Ω–∞ –Ω—É–∫–ª–∏–¥–∞ –ø—Ä–∏ –∏–∑–º–µ—
             -Ä–µ–Ω–∏–∏ –≤ —Ç–æ—á–∫–µ
   45         
   46         static float                fpBDSPAngleDiagramm[48];
   47         
   48         void  BDSP_CalculateIntegral()
   49         {
   50  1        uint16  i,j,k;
   51  1        uint32  integralSum = 0;
   52  1        
   53  1        //—Å—á–∏—Ç–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞–ª –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
   54  1        for(k = 0;k<CHANNELS;k++)
C166 COMPILER V7.53.0.0, BDSP                                                              10/31/2017 16:48:58 PAGE 2   

   55  1        {
   56  2          BDSPData[k].Integral = 0;
   57  2          integralSum = 0;
   58  2          
   59  2          for(i = 0;i</*MainSettings.accumulationTime*/QUERY_SIZE;i++)
   60  2            for(j = 0;j<BDPSChannelSize;j++)
   61  2              integralSum += BDSPData[k].Data[i][j];
   62  2          
   63  2          BDSPData[k].Integral = integralSum ;// MainSettings.accumulationTime;
   64  2        }
   65  1      
   66  1      }
   67         
   68         float BDSP_CalculateQuerySum(uint8  Channel)
   69         {
   70  1        uint16  i = 0,j = 0;
   71  1        float Result = 0;
   72  1        
   73  1        for(i = 0;i<QUERY_SIZE;i++)
   74  1          for(j = 0;j<SPECTR_SIZE_128;j++){
   75  2            Result += BDSPData[Channel].Data[i][j];
   76  2          }
   77  1        /*
   78  1        if(BDSPData[Channel].QueryIndex > 0)
   79  1            Result = Result / BDSPData[Channel].QueryIndex;
   80  1          */
   81  1        return Result;
   82  1      }
   83         
   84         uint16  BDSP_MinCounter(uint8 *minChannelIndex)
   85         {
   86  1        uint8 i = 0;
   87  1        uint32  result = 0xFFFFFFFF;
   88  1          
   89  1          for(i = 0;i<CHANNELS;i++)
   90  1          {
   91  2            if(BDSPData[i].Integral < result){
   92  3              result = BDSPData[i].Integral;
   93  3              *minChannelIndex = i;}
   94  2          }
   95  1          
   96  1        return (uint16)result;
   97  1      }
   98         
   99         uint16 BDSP_MaxCounter(uint8  *maxChannelIndex)
  100         {
  101  1        uint8 i = 0;
  102  1        uint32  result = 0;
  103  1        
  104  1          for(i = 0;i<CHANNELS;i++)
  105  1          {
  106  2            if(BDSPData[i].Integral > result){
  107  3              result = BDSPData[i].Integral;
  108  3              *maxChannelIndex = i;}
  109  2          }
  110  1      
  111  1        return (uint16)result;
  112  1      }
  113         
  114         
  115         
  116         void BDSP_Reset()
C166 COMPILER V7.53.0.0, BDSP                                                              10/31/2017 16:48:58 PAGE 3   

  117         {
  118  1        uint8 i = 0;
  119  1      
  120  1        channelStartCnt = 0;
  121  1        NuclideDetection = 0;
  122  1        NuclideIdentification = 0;
  123  1        
  124  1        fAccumAverageDoseRate = 0;
  125  1        fBackgroundIntergal = 0;
  126  1        
  127  1        iJIndexNuclideIdentification = 0;
  128  1          
  129  1        BDPSChannelSize = SIZE_1024;  //—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —Å–ø–µ–∫—Ç—Ä–∞ - 1024 –∫–∞–Ω–∞–ª–∞
  130  1        BDSPAccumMode = ACCUM_ONLY;
  131  1      
  132  1        
  133  1        for(i = 0;i<CHANNELS;i++)
  134  1        {
  135  2          memset(BDSPData[i].Data,0,sizeof(uint16) * QUERY_SIZE * SPECTR_SIZE);
  136  2          memset(BDSPData[i].InputData,0,sizeof(uint16) * SPECTR_SIZE * 2);
  137  2          memset(BDSPData[i].BackgroundData,0,sizeof(float) * SPECTR_SIZE);
  138  2          memset(BDSPData[i].BackgroundData128,0,sizeof(float) * SPECTR_SIZE_128);
  139  2          memset(BDSPData[i].AccumSpectrData,0,sizeof(float) * SPECTR_SIZE);
  140  2          
  141  2          BDSPData[i].DataCounter = 0;
  142  2          BDSPData[i].Serial = 0;
  143  2          BDSPData[i].Ready = 0;
  144  2          BDSPData[i].Detected = 0;
  145  2          BDSPData[i].QueryIndex = 0;
  146  2          BDSPData[i].Background = 0;
  147  2          BDSPData[i].BackgroundIndex = 0;
  148  2          BDSPData[i].AccumSpectrIndex = 0;
  149  2          BDSPData[i].ActiveBuffer = 0;
  150  2          BDSPData[i].ChangeBufferEvent = 0;
  151  2          BDSPData[i].Dose = 0;
  152  2          BDSPData[i].AccumSpectr = 0;
  153  2          
  154  2        }
  155  1        
  156  1        memset((uint8*)&BDSPParametrs,0,sizeof(tBDSPParametrs));
  157  1        memset(fpBDSPAngleDiagramm,0,sizeof(float) * 48);
  158  1        memset((uint8*)&MeasureInPntData,0,sizeof(sSpecModeData));
  159  1        
  160  1        
  161  1        rWritingParametrRequest = 0;  //—Ñ–ª–∞–≥ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  162  1        
  163  1          CAN_SendMessage(CAN_BDSP_DATA_TX,mResetBDSP,8);
  164  1      }
  165         void BDSP_StopChannel(uint8 Channel)
  166         {
  167  1        CAN_SendMessage(CAN_BDSP_DATA_TX + Channel + 1,mStopBDSP,8);
  168  1      }
  169         
  170         void BDSP_Start()
  171         {
  172  1        CAN_SendMessage(CAN_BDSP_DATA_TX + 1,mStartBDSP,8);
  173  1        CAN_SendMessage(CAN_BDSP_DATA_TX + 2,mStartBDSP,8);
  174  1        CAN_SendMessage(CAN_BDSP_DATA_TX + 3,mStartBDSP,8);
  175  1        CAN_SendMessage(CAN_BDSP_DATA_TX + 4,mStartBDSP,8);
  176  1      
  177  1      }
  178         
C166 COMPILER V7.53.0.0, BDSP                                                              10/31/2017 16:48:58 PAGE 4   

  179         void BDSP_Stop()
  180         {
  181  1        /*
  182  1        BDSP_StopChannel(0);
  183  1        BDSP_StopChannel(1);
  184  1        BDSP_StopChannel(2);
  185  1        BDSP_StopChannel(3);
  186  1        */
  187  1        CAN_SendMessage(CAN_BDSP_DATA_TX + 1,mStopBDSP,8);
  188  1        CAN_SendMessage(CAN_BDSP_DATA_TX + 2,mStopBDSP,8);
  189  1        CAN_SendMessage(CAN_BDSP_DATA_TX + 3,mStopBDSP,8);
  190  1        CAN_SendMessage(CAN_BDSP_DATA_TX + 4,mStopBDSP,8);  
  191  1      }
  192         void BDSP_SetSpectrChannelSize(eSpecMode eMode,uint8  Channel)
  193         {
  194  1        
  195  1      
  196  1        
  197  1        switch(eMode)
  198  1        {
  199  2          case SIZE_1024:
  200  2          {
  201  3            CAN_SendMessage(CAN_BDSP_DATA_TX + Channel,mSpectrSize1024,8);
  202  3          }break;
  203  2          case SIZE_128:
  204  2          {
  205  3            CAN_SendMessage(CAN_BDSP_DATA_TX + Channel,mSpectrSize128,8);
  206  3          }break;
  207  2        }
  208  1        
  209  1      }
  210         /*
  211         —Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç —Å–ø–µ–∫—Ç—Ä–æ–º–µ—Ç—
             -Ä–∞
  212         */
  213         void  BDSP_ClearWorkData()
  214         {
  215  1        uint8 i = 0;
  216  1        //–æ—á–∏—â–∞–µ–º —Ä–∞–±–æ—á–∏–π –º–∞—Å—Å–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–ø–µ–∫—Ç—Ä–æ–≤
  217  1        for(i = 0;i<CHANNELS;i++)
  218  1          memset(BDSPData[i].WorkData,0,sizeof(float) * SPECTR_SIZE);
  219  1      }
  220         
  221         void BDSP_SetSpectrSize(eSpecMode eMode)
  222         {
  223  1        BDSP_SetSpectrChannelSize(eMode,1);
  224  1        BDSP_SetSpectrChannelSize(eMode,2);
  225  1        BDSP_SetSpectrChannelSize(eMode,3);
  226  1        BDSP_SetSpectrChannelSize(eMode,4);
  227  1        
  228  1        BDPSChannelSize = eMode;
  229  1      
  230  1      }
  231         
  232         
  233         void  BDSP_InsertData(uint8 Channel,uint8 *pData)
  234         {
  235  1        
  236  1        
  237  1        float incorrDoseRate = 0;
  238  1        
  239  1        float sum = 0,i = 0;
C166 COMPILER V7.53.0.0, BDSP                                                              10/31/2017 16:48:58 PAGE 5   

  240  1        uint16 time = 0;
  241  1        uint16 length = 0;
  242  1        
  243  1        uint8 activeBuffer = BDSPData[Channel].ActiveBuffer;  //–ø–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –
             -±—É—Ñ–µ—Ä–∞
  244  1        uint8 *pParam = 0;
  245  1            
  246  1                //–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
  247  1                if( (Process_GetOperationMode() == IMDB_CALIBRATION_I)|
  248  1                    (Process_GetOperationMode() == IMDB_CALIBRATION_II)|
  249  1                    (Process_GetOperationMode() == IMDB_CALIBRATION_III)|
  250  1                    (Process_GetOperationMode() == IMDB_CALIBRATION_IV)){
  251  2                      
  252  2                      if(pData[0] == 0x06){
  253  3                        if(pData[1] > 1 && pData[1] < 7){
  254  4                          IMDB_SendCalibrationState( ((pData[1] - 2) * 4) + (Channel+1));
  255  4                          //–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∫–∞–ª–
             -∏–±—Ä–æ–≤–∫–∏ –∫–∞–Ω–∞–ª–∞
  256  4                          if(pData[1] == 6){
  257  5                            if(Channel == 0){
  258  6                              IMDB_SendCalibrationState(21);
  259  6                              Process_IMDBStart();
  260  6                              Process_SetStatus(IMDB_FULLTIME_WORK);
  261  6                            }
  262  5                            if(Channel == 1){
  263  6                              IMDB_SendCalibrationState(22);
  264  6                              Process_IMDBStart();
  265  6                              Process_SetStatus(IMDB_FULLTIME_WORK);
  266  6                            }
  267  5                            if(Channel == 2){
  268  6                              IMDB_SendCalibrationState(23);
  269  6                              Process_IMDBStart();
  270  6                              Process_SetStatus(IMDB_FULLTIME_WORK);
  271  6                            }
  272  5                            if(Channel == 3){
  273  6                              IMDB_SendCalibrationState(24);
  274  6                              Process_IMDBStart();
  275  6                              Process_SetStatus(IMDB_FULLTIME_WORK);
  276  6                            }
  277  5                          }
  278  4                            
  279  4                        }
  280  3                      }
  281  2                      
  282  2                    }
  283  1                    
  284  1              
  285  1                //–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞
  286  1                if(Process_GetOperationMode() == IMDB_INITIALIZATION)
  287  1                {           
  288  2                  if(pData[0] == 0x00 && pData[1] == Channel + 1){
  289  3                      BDSPData[Channel].Ready = 1;
  290  3                        //channelStartCnt++;
  291  3                                      
  292  3                        //if(channelStartCnt == CHANNELS)
  293  3                        if(BDSP_ChannelInitCheck() == CHK_OK)
  294  3                        {
  295  4                          Process_BDPSStatus(DEVICE_WAITING); //–æ–∂–∏–¥–∞–µ–º —Å—Ç–∞–±—ã
  296  4                          //–∑–∞–¥–∞—ë–º 1024 –∫–∞–Ω–∞–ª–∞
  297  4                          BDSP_SetSpectrSize(SIZE_1024);                      
  298  4                        }
  299  3                  }
C166 COMPILER V7.53.0.0, BDSP                                                              10/31/2017 16:48:58 PAGE 6   

  300  2                }
  301  1                if(Process_GetOperationMode() != IMDB_FULLTIME_WORK)
  302  1                {
  303  2                  //–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  304  2      
  305  2                    //–ø–∞—Ä–∞–º–µ—Ç—Ä  –∫–æ—ç—Ñ–∏—Ü–∏–µ–Ω—Ç –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
  306  2                    if(pData[0] == 0x02 && pData[1] == 0x08 && pData[2] == 0x02){
  307  3                      if(rWritingParametrRequest == 0){
  308  4                        memcpy((uint8*)&BDSPParametrs.fAligmentFactors[Channel],(uint8*)(pData + 3),sizeof(float));
  309  4                        
  310  4                        if(Channel < CHANNELS - 1){
  311  5                          BDSP_ParametrRequest(Channel + 1,0x08);
  312  5                        }
  313  4                        else{
  314  5                          BDSP_ParametrRequest(0,0x09);
  315  5                        }
  316  4                      }
  317  3                      else{
  318  4                        if(Channel < CHANNELS - 1){
  319  5                          BDSP_WriteParametr(Channel + 1,0x08,(uint8*)&BDSPParametrs.fAligmentFactors[Channel + 1],sizeof(
             -float));
  320  5                        }
  321  4                        else{
  322  5                          BDSP_WriteParametr(0,0x09,(uint8*)&BDSPParametrs.fDeadTime[0],sizeof(float));
  323  5                        }
  324  4                      }
  325  3                    }
  326  2                    //–ø–∞—Ä–∞–º–µ—Ç—Ä –º–µ—Ä—Ç–≤–æ–µ –≤—Ä–µ–º—è
  327  2                    if(pData[0] == 0x02 && pData[1] == 0x09 && pData[2] == 0x02){
  328  3                      if(!rWritingParametrRequest){
  329  4                        memcpy((uint8*)&BDSPParametrs.fDeadTime[Channel],(uint8*)pData+3,sizeof(float));
  330  4                        
  331  4                        if(Channel < CHANNELS - 1){
  332  5                          BDSP_ParametrRequest(Channel + 1,0x09);
  333  5                        }
  334  4                        else{
  335  5                          BDSP_ParametrRequest(0,0x0A);
  336  5                        }
  337  4                      }
  338  3                      else{
  339  4                        if(Channel < CHANNELS - 1){
  340  5                          BDSP_WriteParametr(Channel + 1,0x09,(uint8*)&BDSPParametrs.fDeadTime[Channel + 1],sizeof(float))
             -;
  341  5                        }
  342  4                        else{
  343  5                          BDSP_WriteParametr(0,0x0A,(uint8*)&BDSPParametrs.fCorrectionFactor,sizeof(float));
  344  5                        }
  345  4                      }
  346  3                    }
  347  2                    //–ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ–ø—Ä –∫–æ—ç—Ñ–∏—Ü–∏–µ–Ω—Ç
  348  2                    if(pData[0] == 0x02 && pData[1] == 0x0A && pData[2] == 0x02){
  349  3                      if(!rWritingParametrRequest){
  350  4                        memcpy((uint8*)&BDSPParametrs.fCorrectionFactor,(uint8*)pData+3,sizeof(float));
  351  4                      
  352  4                        if(Channel < CHANNELS - 1){
  353  5                          BDSP_ParametrRequest(Channel + 1,0x0A);
  354  5                        }
  355  4                        else{
  356  5                          //BDSP_ParametrRequest(0,0x10);
  357  5                          IMDB_BDPSGetParametrsSignalCallback();
  358  5                        }
  359  4                      }
C166 COMPILER V7.53.0.0, BDSP                                                              10/31/2017 16:48:58 PAGE 7   

  360  3                      else{
  361  4                        if(Channel < CHANNELS - 1){
  362  5                          BDSP_WriteParametr(Channel + 1,0x0A,(uint8*)&BDSPParametrs.fCorrectionFactor,sizeof(float));
  363  5                        }
  364  4                        else{
  365  5                          rWritingParametrRequest = 0;
  366  5                          IMDB_BDPSWriteParametrsSignalCallback();
  367  5                        }
  368  4                      }
  369  3                    }
  370  2                  
  371  2      
  372  2                }
  373  1        
  374  1                if(pData[0] == 0x07 && pData[2] == 0 && pData[7] == 0)
  375  1                {
  376  2                  time    = (pData[4] << 8) | pData[3];     
  377  2                  length  = (pData[6] << 8) | pData[5]; 
  378  2      
  379  2                  if(length == BDPSChannelSize && time == 0x01)
  380  2                  {
  381  3                  
  382  3                    BDSPData[Channel].DataCounter = 0;
  383  3                    BDSPData[Channel].ChangeBufferEvent = 0;
  384  3                  }
  385  2                }
  386  1      
  387  1                else if(BDSPData[Channel].DataCounter < BDPSChannelSize)
  388  1                {
  389  2                  BDSPData[Channel].InputData[activeBuffer][ BDSPData[Channel].DataCounter ] = (uint16)((pData[1] << 8
             -) | pData[0]);
  390  2                  BDSPData[Channel].InputData[activeBuffer][ BDSPData[Channel].DataCounter + 1 ] = (uint16)((pData[3] 
             -<< 8) | pData[2]);
  391  2                  BDSPData[Channel].InputData[activeBuffer][ BDSPData[Channel].DataCounter + 2 ] = (uint16)((pData[5] 
             -<< 8) | pData[4]);
  392  2                  BDSPData[Channel].InputData[activeBuffer][ BDSPData[Channel].DataCounter + 3 ] = (uint16)((pData[7] 
             -<< 8) | pData[6]);
  393  2                  
  394  2                  BDSPData[Channel].DataCounter += 4;
  395  2                  
  396  2                }
  397  1                else if(BDSPData[Channel].DataCounter == BDPSChannelSize)
  398  1                {
  399  2                  memcpy(&BDSPData[Channel].DoseRate,pData,sizeof(float));
  400  2      
  401  2      
  402  2                  //BDSPData[Channel].DoseRate = incorrDoseRate;// * 0.001f;
  403  2                  BDSPData[Channel].Dose += (BDSPData[Channel].DoseRate * DOSE_TO_HOUR);
  404  2                  //BDSPData[Channel].Dose = BDSPData[Channel].Dose * DOSE_TO_HOUR;
  405  2                  
  406  2                  BDSPData[Channel].DataCounter += 4;
  407  2                }
  408  1                
  409  1                if(BDSPData[Channel].DataCounter == BDPSChannelSize + 4)
  410  1                {
  411  2                  //1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∫–æ–ø–ª–µ–Ω –ª–∏ —Ñ–æ–Ω
  412  2                  //2. –ï—Å–ª–∏ –¥–∞, —Ç–æ –∑–∞–ø–æ–ª–Ω—è–µ–º –æ—á–µ—Ä–µ–¥—å —Å–ø–µ–∫—Ç—Ä–æ–≤
  413  2                  //3. –í —Ñ–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ —Å–ø–µ–∫—Ç—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–
             -µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –æ—á–µ—Ä–µ–¥—å –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—á—ë—Ç—ã
  414  2                  
  415  2                  /*
  416  2                  08 08 2017 - –∑–∞–Ω—É–ª—è–µ–º –ø–µ—Ä–≤—ã–µ –∫–∞–Ω–∞–ª—ã –≤ –æ–±–æ–∏—Ö –±—É—Ñ–µ—Ä–∞—Ö
C166 COMPILER V7.53.0.0, BDSP                                                              10/31/2017 16:48:58 PAGE 8   

  417  2                  */
  418  2                  #ifdef DEBUG_BDSP_40ZERO
  419  2                    if(BDPSChannelSize == SIZE_128){
  420  3                      memset(BDSPData[Channel].InputData[0],0,sizeof(uint16) * 5);
  421  3                      memset(BDSPData[Channel].InputData[1],0,sizeof(uint16) * 5);
  422  3                    }
  423  2                    if(BDPSChannelSize == SIZE_1024){
  424  3                      memset(BDSPData[Channel].InputData[0],0,sizeof(uint16) * 40);
  425  3                      memset(BDSPData[Channel].InputData[1],0,sizeof(uint16) * 40);
  426  3                    }
  427  2                  #endif
  428  2                  
  429  2                    if(BDSPData[Channel].ActiveBuffer == 1)
  430  2                      BDSPData[Channel].ActiveBuffer = 0;
  431  2                    else
  432  2                      BDSPData[Channel].ActiveBuffer = 1;
  433  2                    
  434  2                    BDSPData[Channel].ChangeBufferEvent = 1;  //—Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ —Å—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è —Å
             -–º–µ–Ω—ã –±—É—Ñ–µ—Ä–∞
  435  2      
  436  2      
  437  2                  BDSPData[Channel].DataCounter = 0;
  438  2                }
  439  1                
  440  1      }
  441         
  442         void  BDSP_InsertCmd(uint8  Channel,uint8 *pData) //–ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ 00X, –∞–ø–ø–∞—Ä
             -–∞—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞ - 1 –æ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ
  443         {
  444  1        uint8 Serial = 0;
  445  1      
  446  1        
  447  1        if(Channel == 0)  //–ø–æ–ª—É—á–∏–ª–∏ –∞–≤–∞—Ä–∏–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤—Å–µ—Ö –ë–î
  448  1        {
  449  2          //–ø—Ä–∏–Ω—è–ª–∏ –∫–æ–º–∞–Ω–¥—É —Å —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º
  450  2          if(pData[0] == 0x01 && pData[1] == 0x01 && pData[2] == 0x00 & pData[3] == 0x00)
  451  2          {
  452  3              Serial = pData[4];  //–ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä
  453  3              
  454  3              BDSPData[Serial - 1].Detected = 1;  //—Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
  455  3            
  456  3            pData[0] = 0x00;
  457  3            pData[1] = Serial;  //(channelStartCnt+1);//–ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –µ–≥–æ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â
             -–µ–Ω–∏–µ –∏ –ø–æ—Å—ã–ª–∞–µ–º –µ–≥–æ –Ω–∞ –±–ª–æ–∫
  458  3            
  459  3            //—à–ª—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º –ª–æ–≥. –Ω–æ–º–µ—Ä–∞
  460  3            //if(Serial != 4)
  461  3              CAN_SendMessageIT(CAN_BDSP_DATA_TX,pData,8);
  462  3          }
  463  2      
  464  2        }
  465  1        else  // —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
  466  1        {
  467  2          if(pData[0] == 0x02 && pData[1] == 0x01)
  468  2          {
  469  3            
  470  3            BDSPData[Channel - 1].Ready = 2;
  471  3            //–≤–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É –ú–î –æ—Ç –∫–∞–Ω–∞–ª–∞ –ë–î
  472  3            
  473  3            CAN_SendMessage(CAN_BDSP_DATA_TX + Channel,mSpectrDoseRateOn,8);
  474  3            
  475  3            if(BDSPData[0].Ready == 2 && BDSPData[1].Ready == 2 && BDSPData[2].Ready == 2 && BDSPData[3].Ready == 2
C166 COMPILER V7.53.0.0, BDSP                                                              10/31/2017 16:48:58 PAGE 9   

             -){
  476  4              //–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  477  4              BDSP_ParametrRequests();
  478  4              //–±–ª–æ–∫ –≥–æ—Ç—Ç–æ–≤
  479  4              Process_BDPSStatus(DEVICE_READY);
  480  4            }
  481  3          }
  482  2        }
  483  1      }
  484         void  BDSP_StartCalbiration(uint8 Channel)
  485         {
  486  1        CAN_SendDefferedMessage(CAN_BDSP_DATA_TX + Channel + 1,mSpectrStartCalibration,8,CALIBRATION_DEFFERED_TIM
             -E);
  487  1      }
  488         
  489         
  490         void  BDSP_ParametrRequests()
  491         {
  492  1        /*
  493  1        –ó–∞–ø—Ä–æ—Å –º–µ—Ä—Ç–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–æ–ø—Ä–∞–≤–æ—á–Ω–æ–≥–æ –∫–æ—ç—Ñ–∏—Ü–∏–µ–Ω—Ç–∞
  494  1        */  
  495  1        rWritingParametrRequest = 0;  
  496  1        BDSP_ParametrRequest(0,0x08);
  497  1      
  498  1      }
  499         void  BDSP_StartWritingParametrs()
  500         {
  501  1        rWritingParametrRequest = 1;
  502  1        //–ø–∏—à–µ–º –ø–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
  503  1          BDSP_WriteParametr(0,0x08,(uint8*)&BDSPParametrs.fAligmentFactors[0],sizeof(float));
  504  1        
  505  1      }
  506         
  507         
  508         void  BDSP_WriteParametr(uint8  Channel,uint8 paramIndex,uint8  *pParam,int dataSize)
  509         {
  510  1        uint8 msgData[8];
  511  1          
  512  1          memset(msgData,0,sizeof(uint8) * 8);
  513  1        
  514  1          msgData[0] = 0x02;        //–∫–æ–¥ –æ–ø–µ—Ä–∞—Ü–∏–∏
  515  1          msgData[1] = paramIndex;  //–Ω–æ–º–µ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
  516  1          msgData[2] = 0x02;        //—Ä–∞–∑–º–µ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (4 –±–∞–π—Ç–∞)
  517  1        
  518  1        memcpy((uint8*)(msgData + 3),(uint32*)(pParam),dataSize);
  519  1        
  520  1        CAN_SendMessage(CAN_BDSP_DATA_TX + Channel + 1,msgData,8);
  521  1      }
  522         void  BDSP_ParametrRequest(uint8 Channel,uint8 paramIndex)
  523         {
  524  1        uint8 msgData[8];
  525  1          memset(msgData,0,sizeof(uint8) * 8);
  526  1        
  527  1        msgData[0] = 0x04;        //–∫–æ–¥ –æ–ø–µ—Ä–∞—Ü–∏–∏
  528  1        msgData[1] = paramIndex;  //–Ω–æ–º–µ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
  529  1        msgData[2] = 0x00;        //—Ä–∞–∑–º–µ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (4 –±–∞–π—Ç–∞)
  530  1        
  531  1        CAN_SendMessage(CAN_BDSP_DATA_TX + Channel + 1,msgData,8);
  532  1      }
  533         eChanChkStatus    BDSP_ChannelInitCheck()
  534         {
  535  1        eChanChkStatus Status = CHK_OK;
C166 COMPILER V7.53.0.0, BDSP                                                              10/31/2017 16:48:58 PAGE 10  

  536  1        /*
  537  1        —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤ —Å–ø–µ–∫—Ç—Ä–æ–º–µ—Ç—Ä–∞
  538  1          –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ –ë–î–ì–ü-–°, –¥–∞–Ω–Ω—ã–π –±–ª–æ–∫–∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–
             -∑–∞–ø—É—Å–∫–∞ —Å–æ —Å–≤–æ–∏–º —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º
  539  1          –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ–ª–∞–≥–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ —Å–ø–µ–∫
             -—Ç—Ä–æ–º–µ—Ç—Ä–∞
  540  1        
  541  1          –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ, –ë–° –æ—Ç—Å—ã–ª–∞–µ—Ç –∫–æ–º–∞–Ω
             -–¥—É –∑–∞–¥–∞–Ω–∏—è –ª–æ–≥. –Ω–æ–º–µ—Ä–∞.
  542  1          —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ –ª–æ–≥. –Ω–æ–º–µ—Ä–∞ –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ–ª–∞
             -–≥ –æ–∂–∏–¥–∞–Ω–∏—è —É —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –ë–î–ì–ü-–°
  543  1        
  544  1          –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–
             -≤ —Å–ø–µ–∫—Ç—Ä–æ–º–µ—Ç—Ä–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ —É—Å–ª–æ–≤–∏—è
  545  1        0. –§–ª–∞–≥–æ–≤ Detection = 1 –¥–æ–ª–∂–Ω–æ == CHANNELS
  546  1        1. –§–ª–∞–≥–∏ Detection == Ready
  547  1        */
  548  1        if(!BDSPData[0].Detected & !BDSPData[1].Detected & !BDSPData[2].Detected & !BDSPData[3].Detected){
  549  2          Status = CHK_INVALID_CHN_CNH;
  550  2        }
  551  1        else{
  552  2          if( !((BDSPData[0].Detected & BDSPData[0].Ready) &
  553  2               (BDSPData[1].Detected & BDSPData[1].Ready) &
  554  2               (BDSPData[2].Detected & BDSPData[2].Ready) &
  555  2               (BDSPData[3].Detected & BDSPData[3].Ready)))
  556  2            Status = CHK_INVALID_CHN_WAIT;
  557  2        } 
  558  1        
  559  1        return Status;
  560  1      }
  561         
  562         void BDSP_BackgroundAccumulation(uint8  Channel,uint16  *pData)
  563         {
  564  1        uint16  i = 0,j = 0,sI = 0;
  565  1        
  566  1        float temp = 0;
  567  1      
  568  1        if(BDSPData[Channel].BackgroundIndex < BACKGROUND_TIME){
  569  2          for(i = 0;i<SPECTR_SIZE;i++){
  570  3            BDSPData[Channel].BackgroundData[i] = BDSPData[Channel].BackgroundData[i] + (pData[i] * 1.0); //–∫–æ–ø–
             -∏–º —Å—á—ë—Ç
  571  3          }
  572  2          BDSPData[Channel].BackgroundAverageDose += BDSPData[Channel].DoseRate;  //–∫–æ–ø–∏–º —Ñ–æ–Ω–æ–≤—É—é –¥–æ–
             -∑—É
  573  2      
  574  2          BDSPData[Channel].BackgroundIndex++;
  575  2        }
  576  1        
  577  1        if((BDSPData[Channel].Background == 0) && (BDSPData[Channel].BackgroundIndex == BACKGROUND_TIME) ){
  578  2          //–∑–∞–≤–µ—Ä—à–∏–ª–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞
  579  2          BDSPData[Channel].Background = 1;
  580  2          BDSPData[Channel].BackgroundAverageDose = BDSPData[Channel].BackgroundAverageDose / BACKGROUND_TIME;  //–
             -ø–æ–ª—É—á–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –ú–î
  581  2          
  582  2            //BDSP_StopChannel(Channel);//–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–Ω–∞–ª   
  583  2              
  584  2            //BDSP_SetSpectrChannelSize(SIZE_128,Channel);//BDSP_SetSpectrSize(SIZE_128);//—Å—Ç–∞–≤–∏–º —Ä–∞–∑–º–µ—
             -Ä —Å–ø–µ–∫—Ç—Ä–∞ 128 –∫–∞–Ω–∞–ª–æ–≤
  585  2          
  586  2          //–ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∫–æ–ø–∏–ª–∏ –ª–∏ –º—ã —Ñ–æ–Ω —É –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
  587  2          if((BDSPData[0].Background == 1) && (BDSPData[1].Background == 1) && (BDSPData[2].Background == 1) && (B
             -DSPData[3].Background == 1))
C166 COMPILER V7.53.0.0, BDSP                                                              10/31/2017 16:48:58 PAGE 11  

  588  2          {
  589  3            //–≤—ã—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Ñ–æ–Ω–æ–≤—É—é –ú–î –ø–æ –≤—Å–µ–º 4 –∫–∞–Ω–∞–ª–∞–º
  590  3            fAccumAverageDoseRate = BDSPData[0].BackgroundAverageDose + BDSPData[1].BackgroundAverageDose +
  591  3                                    BDSPData[2].BackgroundAverageDose + BDSPData[3].BackgroundAverageDose;
  592  3            
  593  3            fAccumAverageDoseRate = fAccumAverageDoseRate / CHANNELS;
  594  3            
  595  3            BDSP_SetSpectrSize(SIZE_128);
  596  3            Process_IMDBStart();      
  597  3            
  598  3            IMDB_SendPacket(IMDB_SEND_BACKGROUND_SUCCESS,(uint8*)&fAccumAverageDoseRate,sizeof(float));//–æ—Ç—Å—ã–ª
             -–∞–µ–º —É—Å–ø–µ—Ö –≤ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–∏ —Ñ–æ–Ω–∞
  599  3            Process_SetStatus(IMDB_FULLTIME_WORK);//–ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º —à—Ç–∞—Ç–Ω–æ–π —Ä–∞–±–
             -æ—Ç—ã
  600  3      
  601  3            
  602  3            //Process_IMDBStart();  //–∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å 
  603  3          }
  604  2          //–ø–æ–ª—É—á–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å —Å—á—ë—Ç–∞ –¥–ª—è 128 –∫–∞–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–æ–Ω–æ–≤–æ–≥–æ —Å–ø–µ–∫
             -—Ç—Ä–∞
  605  2            sI = 0;
  606  2          for(i = 0;i<SPECTR_SIZE_128;i++){
  607  3            BDSPData[Channel].BackgroundData128[i] = (BDSPData[Channel].BackgroundData[sI]     + BDSPData[Channel].
             -BackgroundData[sI + 1] + 
  608  3                                                      BDSPData[Channel].BackgroundData[sI + 2] + BDSPData[Channel].BackgroundData[sI + 
             -3] + 
  609  3                                                      BDSPData[Channel].BackgroundData[sI + 4] + BDSPData[Channel].BackgroundData[sI + 
             -5] + 
  610  3                                                      BDSPData[Channel].BackgroundData[sI + 6] + BDSPData[Channel].BackgroundData[sI + 
             -7]);
  611  3            sI+=8;
  612  3          }
  613  2          
  614  2          
  615  2          temp = 0;
  616  2          
  617  2          for(i = 0;i<SPECTR_SIZE_128;i++){
  618  3            BDSPData[Channel].BackgroundData128[i] = BDSPData[Channel].BackgroundData128[i] * BACKGROUND_KOEF;//( 1
             -.0f / (float)BACKGROUND_TIME);
  619  3            
  620  3            temp += BDSPData[Channel].BackgroundData128[i];
  621  3          }
  622  2          
  623  2          //–ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞–ª –ø–æ —Ñ–æ–Ω—É —Å–æ –≤—Å–µ—Ö 4—Ö –∫–∞–Ω–∞–ª–æ–≤
  624  2          fBackgroundIntergal += temp;
  625  2          
  626  2          IMDB_DEBUG_SendDataMsg((uint8*)&temp,100,4);
  627  2          
  628  2          temp = 0;
  629  2          
  630  2          //–ø–æ–ª—É—á–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å —Å—á—ë—Ç–∞ 
  631  2          for(i = 0;i<SPECTR_SIZE;i++){
  632  3            BDSPData[Channel].BackgroundData[i] = BDSPData[Channel].BackgroundData[i] * BACKGROUND_KOEF;//( 1.0f / 
             -(float)BACKGROUND_TIME);
  633  3            
  634  3            temp += BDSPData[Channel].BackgroundData[i];
  635  3          }
  636  2          IMDB_DEBUG_SendDataMsg((uint8*)&temp,101,4);
  637  2          
  638  2        }
  639  1      }
  640         void BDSP_ResetBackgroundData()
C166 COMPILER V7.53.0.0, BDSP                                                              10/31/2017 16:48:58 PAGE 12  

  641         {
  642  1        uint8 i = 0;
  643  1        
  644  1        //–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–µ–∫—Ç—Ä–æ–º–µ—Ç—Ä
  645  1        BDSP_Stop();
  646  1        BDSP_SetSpectrSize(SIZE_1024);
  647  1        
  648  1          for(i = 0;i<CHANNELS;i++){
  649  2            BDSPData[i].BackgroundIndex = 0;
  650  2            BDSPData[i].Background = 0;
  651  2            BDSPData[i].BackgroundAverageDose = 0;
  652  2            
  653  2            memset(BDSPData[i].BackgroundData,0,sizeof(float) * SPECTR_SIZE);
  654  2            memset(BDSPData[i].BackgroundData128,0,sizeof(float) * SPECTR_SIZE_128);
  655  2            
  656  2          }
  657  1        BDSP_Start();
  658  1      }
  659         
  660         void BDSP_InsertInQuery(uint16 xhuge  *pData, uint8 Channel)//—Ñ–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –æ—
             -á–µ—Ä–µ–¥—å
  661         {
  662  1        uint16 i = 0;
  663  1        uint16  sBufSize = QUERY_SIZE;//MainSettings.accumulationTime - 1;
  664  1        float temp = 0;
  665  1        
  666  1        if(BDSPData[Channel].QueryIndex < sBufSize)
  667  1        {
  668  2          memcpy(BDSPData[Channel].Data[BDSPData[Channel].QueryIndex],pData,sizeof(uint16) * SPECTR_SIZE);
  669  2          BDSPData[Channel].QueryIndex++;
  670  2        }
  671  1        else
  672  1        {
  673  2          memcpy(&BDSPData[Channel].Data[0],&BDSPData[Channel].Data[1],sizeof(uint16) * SPECTR_SIZE * (sBufSize - 
             -1));
  674  2          
  675  2          memcpy(&BDSPData[Channel].Data[sBufSize - 1],pData,sizeof(uint16) * SPECTR_SIZE);
  676  2        }
  677  1      }
  678         
  679         
  680         uint8 BDSP_Identification128()
  681         {
  682  1        float fQuantile = 0;
  683  1        uint16  *pSumQueryData = 0;
  684  1        uint8 jNuclideIndex = 0;
  685  1        uint8 maxIntegralIndex = 0;
  686  1        uint8 i = 0, j = 0, k = 0, start = 0, end = 0;
  687  1        uint16  accTime = MainSettings.accumulationTime;
  688  1        
  689  1        BDSP_CalculateIntegral();
  690  1        BDSP_MaxCounter(&maxIntegralIndex);
  691  1        
  692  1        memset(fQuantileArray,0,sizeof(float) * SPECTR_SIZE_128);
  693  1        
  694  1        for(j = 1;j<=126;j++)
  695  1        {
  696  2          BDSPData[maxIntegralIndex].ppMax = 0;
  697  2          BDSPData[maxIntegralIndex].ppBackgroundMax = 0;
  698  2          
  699  2          start = 116 - 0.91 * j;
  700  2          end = 129 - j;
C166 COMPILER V7.53.0.0, BDSP                                                              10/31/2017 16:48:58 PAGE 13  

  701  2          
  702  2            //—Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞–ª—ã –ø–æ –æ–∫–Ω–∞–º
  703  2            for(i = 0;i<QUERY_SIZE;i++)
  704  2            {
  705  3              for(k = start;k<=end;k++)
  706  3              {
  707  4                BDSPData[maxIntegralIndex].ppMax += BDSPData[maxIntegralIndex].Data[i][k - 1];
  708  4                if(i == 0)
  709  4                  BDSPData[maxIntegralIndex].ppBackgroundMax += BDSPData[maxIntegralIndex].BackgroundData128[k - 1];
  710  4              }
  711  3            }
  712  2            BDSPData[maxIntegralIndex].ppBackgroundMax = BDSPData[maxIntegralIndex].ppBackgroundMax * QUERY_SIZE;
  713  2            //—Ä–∞—Å—Å—á—ë—Ç –∫–≤–∞–Ω—Ç–∏–ª—è
  714  2            fQuantile = (BDSPData[maxIntegralIndex].ppMax - BDSPData[maxIntegralIndex].ppBackgroundMax - 1.0f) / (s
             -qrt(BDSPData[maxIntegralIndex].ppBackgroundMax) + 1.0f);
  715  2            if(fQuantile < 0)
  716  2              fQuantile = 0;
  717  2            
  718  2            //–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –∫–≤–∞–Ω—Ç–∏–ª—è, —Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ –≤ –º–∞—Å—Å
             -–∏–≤ –∫–≤–∞–Ω—Ç–∏–ª–µ–π
  719  2            if(fQuantile > MainSettings.limitDetect[0])
  720  2              fQuantileArray[j-1] = fQuantile;
  721  2            
  722  2        }
  723  1        /*
  724  1        –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ
  725  1        */
  726  1        //–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–π –≤ –º–∞—Å—Å–∏–≤–µ –∫–≤–∞–Ω—Ç–∏–ª–µ–π
  727  1        for(j = 1;j<=126;j++)
  728  1        {
  729  2          //–µ—Å–ª–∏ –Ω–µ—Ç —Ñ–ª–∞–≥–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
  730  2          if(!NuclideDetection){
  731  3            //–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –∫–≤–∞–Ω—Ç–∏–ª—è
  732  3            if(fQuantileArray[j-1] > MainSettings.limitDetect[0]){
  733  4              //—Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏ —à–ª—ë–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—è
  734  4              NuclideDetection = 1;
  735  4              IMDB_NuclideDetectionSignalCallback();
  736  4            }
  737  3          }
  738  2          //–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
  739  2          else
  740  2          {
  741  3            //–µ—Å–ª–∏ –≤ –º–∞—Å—Å–∏–≤–µ –∫–≤–∞–Ω—Ç–∏–ª–µ–π –µ—Å—Ç—å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞, —Ç–æ –≤—ã—Ö
             -–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
  742  3            if(fQuantileArray[j-1] > MainSettings.limitDetect[0])
  743  3              break;
  744  3            //–µ—Å–ª–∏ –Ω–µ—Ç –∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –∫–≤–∞–Ω—Ç–∏–ª—å, —Ç–æ –≤ –º–∞—Å—
             -Å–∏–≤–µ –Ω–µ—Ç –≤–æ–æ–±—â–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–π, —à–ª—ë–º —Å–∏–≥–Ω–∞–ª –æ —Å–±—Ä–æ—Å–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
  745  3            else
  746  3            {
  747  4              if(j == 126){
  748  5                NuclideDetection = 0;
  749  5                
  750  5                IMDB_NuclideEndDetectionSignalCallback();
  751  5                IMDB_NuclideIdentificationEndSignalCallback();
  752  5              }
  753  4            }
  754  3          }
  755  2        }
  756  1        /*
  757  1        –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
  758  1          –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ
C166 COMPILER V7.53.0.0, BDSP                                                              10/31/2017 16:48:58 PAGE 14  

  759  1        */
  760  1        if(NuclideDetection == 1)
  761  1        {
  762  2          //–ø–æ–ª—É—á–∞–µ–º —Å—É–º–º–∞—Ä–Ω—ã–π —Å–ø–µ–∫—Ç—Ä –∫–∞–Ω–∞–ª–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Å—É–º–º–∞—Ä
             -–Ω—ã–º —Å—á—ë—Ç–æ–º
  763  2          pSumQueryData = (uint16*)BDSP_DEBUG_GetQuerySumSpectr(maxIntegralIndex);
  764  2          
  765  2          for(j = 120;j>=4;j--){
  766  3            if( (pSumQueryData[j] > 20) &&  (pSumQueryData[j] > (0.8f * (pSumQueryData[j+2]+pSumQueryData[j+3]) + 2
             -)) &&
  767  3                                            (pSumQueryData[j] > (0.8f * (pSumQueryData[j-2]+pSumQueryData[j-3]) + 2)) ) {
  768  4                                              
  769  4                                              jNuclideIndex = j;
  770  4                                              
  771  4                                              if(!NuclideIdentification)
  772  4                                                NuclideIdentification = 1;
  773  4                                              break;
  774  4                                            }
  775  3          }
  776  2          
  777  2          if(NuclideIdentification)
  778  2          {
  779  3            IMDB_DEBUG_SendDataMsg((uint8*)&jNuclideIndex,7,1);
  780  3            //Cs137
  781  3            if(jNuclideIndex >=26 && jNuclideIndex <= 29){
  782  4              IMDB_NuclideIdentificationSignalCallback(1);
  783  4            }
  784  3            //Cs-134
  785  3            else if(jNuclideIndex >=32 && jNuclideIndex <= 36){
  786  4              IMDB_NuclideIdentificationSignalCallback(2);
  787  4            }
  788  3            //Co-60
  789  3            else if(jNuclideIndex >=53 && jNuclideIndex <= 57){
  790  4              IMDB_NuclideIdentificationSignalCallback(3);
  791  4            }
  792  3            //I-131
  793  3            else if(jNuclideIndex >=12 && jNuclideIndex <= 16){
  794  4              IMDB_NuclideIdentificationSignalCallback(4);
  795  4            }
  796  3            else{
  797  4              IMDB_NuclideIdentificationSignalCallback(0xFF);
  798  4            }
  799  3            NuclideIdentification = 0;
  800  3          }
  801  2          /*
  802  2          for(j = 5;j<=121;j++)
  803  2          {
  804  2      
  805  2            if(fQuantileArray[j-1] > MainSettings.limitDetect[0] + 1)
  806  2            {
  807  2              //
  808  2              //TO-DO —ç—Ç–æ –Ω–∞–¥–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å!
  809  2              //
  810  2              if(fQuantileArray[j-1] > (0.33f * (fQuantileArray[j-3] + fQuantileArray[j-4] + fQuantileArray[j-5]))){
  811  2                if(fQuantileArray[j-1] > (0.33f * (fQuantileArray[j+1] + fQuantileArray[j+2] + fQuantileArray[j+3])))
             -{
  812  2                  jNuclideIndex = j;
  813  2                  if(!NuclideIdentification)
  814  2                    NuclideIdentification = 1;
  815  2                  break;
  816  2                }
  817  2              }
C166 COMPILER V7.53.0.0, BDSP                                                              10/31/2017 16:48:58 PAGE 15  

  818  2            }
  819  2          }
  820  2          if(NuclideIdentification)
  821  2          {
  822  2            IMDB_DEBUG_SendDataMsg((uint8*)&jNuclideIndex,7,1);
  823  2            
  824  2            if(jNuclideIndex >=98 && jNuclideIndex <= 102){
  825  2              IMDB_NuclideIdentificationSignalCallback(1);
  826  2            }
  827  2            else if(jNuclideIndex >=91 && jNuclideIndex <= 95){
  828  2              IMDB_NuclideIdentificationSignalCallback(2);
  829  2            }
  830  2            else if(jNuclideIndex >=67 && jNuclideIndex <= 73){
  831  2              IMDB_NuclideIdentificationSignalCallback(3);
  832  2            }
  833  2            else if(jNuclideIndex >=110 && jNuclideIndex <= 114){
  834  2              IMDB_NuclideIdentificationSignalCallback(4);
  835  2            }
  836  2            else{
  837  2              IMDB_NuclideIdentificationSignalCallback(0xFF);
  838  2            }
  839  2            NuclideIdentification = 0;
  840  2          }*/
  841  2          
  842  2        }
  843  1        
  844  1        return 1;
  845  1      }
  846         
  847         
  848         uint8 BDSP_Identification(uint16  *ePhotoPeak, float  *iSpdCounter)//—Ñ-–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ —
             -Å–ø–µ–∫—Ç—Ä–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ
  849         {
  850  1        
  851  1        static uint16 photoPeakEnergy = 0;    //—ç–Ω–µ—Ä–≥–∏—è —Ñ–æ—Ç–æ–ø–∏–∫–∞
  852  1        static float wndNuclideCnt = 0; //—Å–∫–æ—Ä–æ—Å—Ç—å —Å—á—ë—Ç–∞ –≤ –æ–∫–Ω–µ
  853  1        float fQuantile = 0;
  854  1        __IO uint8 temp1 = 0;
  855  1        uint16  leftBrd = 0;
  856  1        uint16  rightBrd = 0;
  857  1        
  858  1        uint16 jNuclideIndex = 0;
  859  1        uint8 maxIntegralIndex = 0;
  860  1        uint32  maxIntegralValue = 0;
  861  1        uint16  i = 0, j = 0, k = 0, start = 0, end = 0;
  862  1        uint16  accTime = MainSettings.accumulationTime;
  863  1        
  864  1        /////
  865  1        static float near fMaxBackground = 0;
  866  1        static float near fMaxData[10];
  867  1        /////
  868  1        
  869  1        memset(fMaxData,0,sizeof(float) * 10);
  870  1        
  871  1        for(i = 0;i<CHANNELS;i++){
  872  2          BDSPData[i].Integral = 0;
  873  2            for(j = 0;j<SPECTR_SIZE;j++){
  874  3              BDSPData[i].Integral += BDSPData[i].AccumSpectrData[j];
  875  3            }
  876  2            if(BDSPData[i].Integral > maxIntegralValue){
  877  3              maxIntegralValue = BDSPData[i].Integral;
  878  3              maxIntegralIndex = (uint8)i;
C166 COMPILER V7.53.0.0, BDSP                                                              10/31/2017 16:48:58 PAGE 16  

  879  3            }
  880  2        }
  881  1        
  882  1        /*
  883  1          –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –Ω–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–∏ –≤ —Ç–æ
             -—á–∫–µ 1
  884  1        */
  885  1        if(MeasureInPntData.MeasureNumber == 1){
  886  2        
  887  2          memset(fQuantileArray,0,sizeof(float) * SPECTR_SIZE);
  888  2          
  889  2          
  890  2          NuclideDetection = 0;
  891  2          
  892  2          
  893  2          for(k = 1000;k>=21;k--){
  894  3            memset(fMaxData,0,sizeof(float) * 10);
  895  3            fMaxBackground = 0;
  896  3            
  897  3            for(i = k - 1;i<= k + 1;i++)
  898  3              fMaxData[0] += BDSPData[maxIntegralIndex].AccumSpectrData[i];
  899  3            
  900  3            for(i = k - 5;i<= k - 3;i++)
  901  3              fMaxData[1] += BDSPData[maxIntegralIndex].AccumSpectrData[i];
  902  3            fMaxData[1] = 1.0f * (float)fMaxData[1] + 1.0f;
  903  3            
  904  3            for(i = k + 3;i<= k + 5;i++)
  905  3              fMaxData[2] += BDSPData[maxIntegralIndex].AccumSpectrData[i];
  906  3            fMaxData[2] = 1.0f * (float)fMaxData[2] + 1.0f;
  907  3            
  908  3            for(i = k - 9;i<= k - 7;i++)
  909  3              fMaxData[4] += BDSPData[maxIntegralIndex].AccumSpectrData[i];
  910  3            fMaxData[4] = 1.0f * (float)fMaxData[4] + 1.0f;
  911  3            
  912  3            for(i = k + 7;i<= k + 9;i++)
  913  3              fMaxData[5] += BDSPData[maxIntegralIndex].AccumSpectrData[i];
  914  3            fMaxData[5] = 1.0f * (float)fMaxData[5] + 1.0f;
  915  3            
  916  3            for(i = k - 7;i<= k - 5;i++)
  917  3              fMaxData[6] += BDSPData[maxIntegralIndex].AccumSpectrData[i];
  918  3            fMaxData[6] = 1.0f * (float)fMaxData[6] + 1.0f;
  919  3            
  920  3            for(i = k + 5;i<= k + 7;i++)
  921  3              fMaxData[7] += BDSPData[maxIntegralIndex].AccumSpectrData[i];
  922  3            fMaxData[7] = 1.0f * (float)fMaxData[7] + 1.0f;
  923  3            
  924  3            for(i = k - 1;i<= k + 1;i++)
  925  3              fMaxBackground += BDSPData[maxIntegralIndex].BackgroundData[i];
  926  3            fMaxBackground = fMaxBackground * accTime;
  927  3            
  928  3            fMaxData[3] = fMaxBackground + (MainSettings.limitDetect[0] * sqrt(fMaxBackground) + 1.5f);
  929  3            
  930  3            /*
  931  3            0 - [-1 +1]
  932  3            1 - [-5 -3]
  933  3            2 - [+3 +5]
  934  3            3 - —Ñ–æ–Ω
  935  3            4 - [-9 -7]
  936  3            5 - [+7 +9]
  937  3            6 - [-7 -5]
  938  3            7 - [+5 +7]
  939  3            */
C166 COMPILER V7.53.0.0, BDSP                                                              10/31/2017 16:48:58 PAGE 17  

  940  3            /*
  941  3              if(k == 300)
  942  3              {
  943  3                temp1 = 1;
  944  3              }
  945  3            */
  946  3            /*if( (fMaxData[0] > 20.0f) &&
  947  3                (fMaxData[0] > fMaxData[1]) &&
  948  3                (fMaxData[0] > fMaxData[2]) &&
  949  3                (fMaxData[0] > fMaxData[4]) &&
  950  3                (fMaxData[0] > fMaxData[5]) &&
  951  3                (fMaxData[0] > fMaxData[3]))*/
  952  3              if((fMaxData[0] > 20.0f) &&
  953  3                 (fMaxData[0] > fMaxData[1])&&
  954  3                 (fMaxData[0] > fMaxData[2])&&
  955  3                 (fMaxData[0] > fMaxData[4])&&
  956  3                 (fMaxData[0] > fMaxData[5])&&
  957  3                 (fMaxData[0] > fMaxData[6])&&
  958  3                 (fMaxData[0] > fMaxData[7])&&
  959  3                 (fMaxData[1] > fMaxData[4])&&
  960  3                 (fMaxData[2] > fMaxData[5])&&
  961  3                 (fMaxData[0] > fMaxData[3]))
  962  3                {
  963  4                    //IMDB_DEBUG_SendDataMsg((uint8*)&fMaxBackground,211,4);
  964  4                    /*IMDB_DEBUG_SendDataMsg((uint8*)&k,8,2);
  965  4                    IMDB_DEBUG_SendDataMsg((uint8*)&fMaxData[0],200,4);
  966  4                    IMDB_DEBUG_SendDataMsg((uint8*)&fMaxData[1],201,4);
  967  4                    IMDB_DEBUG_SendDataMsg((uint8*)&fMaxData[2],202,4);
  968  4                    IMDB_DEBUG_SendDataMsg((uint8*)&fMaxBackground,203,4);
  969  4                    */
  970  4                    jNuclideIndex = k;
  971  4                    
  972  4                    NuclideDetection = 1;
  973  4                    IMDB_NuclideDetectionSignalCallback();
  974  4                
  975  4                  break;
  976  4                }
  977  3          }
  978  2          if(NuclideDetection == 1)
  979  2          {
  980  3            if(!NuclideIdentification)
  981  3              NuclideIdentification = 1;
  982  3            
  983  3            if(NuclideIdentification){
  984  4                IMDB_DEBUG_SendDataMsg((uint8*)&jNuclideIndex,8,2);
  985  4              
  986  4              if(jNuclideIndex >=210 && jNuclideIndex <= 230){
  987  5                IMDB_NuclideIdentificationSignalCallback(1);
  988  5              }
  989  4              else if(jNuclideIndex >=260 && jNuclideIndex <= 270){
  990  5                IMDB_NuclideIdentificationSignalCallback(2);
  991  5              }
  992  4              else if(jNuclideIndex >=440 && jNuclideIndex <= 450){
  993  5                IMDB_NuclideIdentificationSignalCallback(3);
  994  5              }
  995  4              else if(jNuclideIndex >=115 && jNuclideIndex <= 125){
  996  5                IMDB_NuclideIdentificationSignalCallback(4);
  997  5              }
  998  4              else{
  999  5                //IMDB_NuclideIdentificationSignalCallback(0xFF);
 1000  5                IMDB_NuclideEndDetectionSignalCallback();
 1001  5                IMDB_NuclideIdentificationEndSignalCallback();          
C166 COMPILER V7.53.0.0, BDSP                                                              10/31/2017 16:48:58 PAGE 18  

 1002  5              }
 1003  4              NuclideIdentification = 0;    
 1004  4            }
 1005  3          }   
 1006  2        }//END MeasureInPntData.MeasureNumber == 1
 1007  1      
 1008  1      /*
 1009  1        photoPeakEnergy = 2910 - 2.865 * jNuclideIndex;
 1010  1        
 1011  1        for(j = (915 - 0.91 * jNuclideIndex);j<= 1025 - jNuclideIndex;j++)
 1012  1          wndNuclideCnt += BDSPData[maxIntegralIndex].AccumSpectrData[j - 1];
 1013  1        wndNuclideCnt = wndNuclideCnt / accTime;
 1014  1      */
 1015  1        //–ø—Ä–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–∏ –≤ —Ç–æ—á–∫–µ 2 –≤–æ—Å—Å—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å —Å—á–µ—Ç–∞ –≤ –æ–
             -∫–Ω–µ –∏ —ç–Ω–µ—Ä–≥–∏—é —Ñ–æ—Ç–æ–ø–∏–∫–∞ –∏–∑ j-–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞
 1016  1        if(MeasureInPntData.MeasureNumber == 2)
 1017  1          jNuclideIndex = iJIndexNuclideIdentification;
 1018  1        
 1019  1        //–ø–æ–ª—É—á–∞–µ–º —ç–Ω–µ—Ä–≥–∏—é —Ñ–æ—Ç–æ–ø–∏–∫–∞
 1020  1        photoPeakEnergy = /*2925 - */3.0f * jNuclideIndex;
 1021  1        //–ø–æ–ª—É—á–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –æ–∫–Ω–∞ —Ñ–æ—Ç–æ–ø–∏–∫–∞
 1022  1        leftBrd = (/*946 - */jNuclideIndex - 20);
 1023  1        rightBrd = (/*1004 - */jNuclideIndex + 20);
 1024  1        //–ø–æ–ª—É—á–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å —Å—á—ë—Ç–∞ –≤ –æ–∫–Ω–µ —Ñ–æ—Ç–æ–ø–∏–∫–∞
 1025  1          wndNuclideCnt = 0;
 1026  1          
 1027  1            for(j = leftBrd;j<=rightBrd;j++)
 1028  1              wndNuclideCnt += BDSPData[maxIntegralIndex].AccumSpectrData[j - 1];
 1029  1          
 1030  1          wndNuclideCnt = wndNuclideCnt / accTime;
 1031  1        
 1032  1        *ePhotoPeak = photoPeakEnergy;
 1033  1        *iSpdCounter = wndNuclideCnt;
 1034  1      
 1035  1        return jNuclideIndex;
 1036  1        
 1037  1      }
 1038         void BDSP_StartSpectrAccumulation(eSpecAccumMode Mode)
 1039         {
 1040  1        /*
 1041  1        0. –û—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–ø–µ–∫—Ç—Ä–æ–º–µ—Ç—Ä
 1042  1        1. –ü—Ä–æ–∏–∑–≤–µ–ª–∏ –æ—á–∏—Å—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏ –¥–∞–Ω–Ω—ã—Ö
 1043  1        1. –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–ø–µ–∫—Ç—Ä–æ–º–µ—Ç—Ä –≤ —Ä–µ–∂–∏–º 1024 –∫–∞–Ω–∞–ª
 1044  1        2. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ø–µ–∫—Ç—Ä–æ–º–µ—Ç—Ä
 1045  1        */
 1046  1        BDSP_Stop();
 1047  1        BDSP_ClearData();
 1048  1        
 1049  1          BDSPAccumMode = Mode; //–∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Ä–µ–∂–∏–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
 1050  1          
 1051  1          Process_SetStatus(IMDB_SPECTR_ACCUMULATION);
 1052  1        
 1053  1        BDSP_SetSpectrSize(SIZE_1024);
 1054  1        BDSP_Start();
 1055  1        
 1056  1      }
 1057         void  BDSP_SpectrAccumulation(uint8 Channel,uint16  *pData)
 1058         {
 1059  1        uint16 i = 0;
 1060  1        uint16  photoPeak = 0;
 1061  1        float   spdCounter = 0.0f;
 1062  1        float   fCurrentDoseRate = 0;
C166 COMPILER V7.53.0.0, BDSP                                                              10/31/2017 16:48:58 PAGE 19  

 1063  1        
 1064  1        
 1065  1        
 1066  1        if(BDSPData[Channel].AccumSpectrIndex < MainSettings.accumulationTime){
 1067  2          for(i = 0;i<SPECTR_SIZE;i++){
 1068  3            BDSPData[Channel].AccumSpectrData[i] = BDSPData[Channel].AccumSpectrData[i] + pData[i]; //–∫–æ–ø–∏–º —Å
             -—á—ë—Ç
 1069  3          }
 1070  2          BDSPData[Channel].AccumSpectrIndex++;
 1071  2        }
 1072  1        
 1073  1        if(BDSPData[Channel].AccumSpectr == 0 && BDSPData[Channel].AccumSpectrIndex >= MainSettings.accumulationT
             -ime)
 1074  1        {
 1075  2          BDSPData[Channel].AccumSpectr = 1;
 1076  2          
 1077  2      
 1078  2            if(BDSPAccumMode == ACCUM_ONLY){
 1079  3              
 1080  3                //BDSP_StopChannel(Channel);//–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–Ω–∞–ª   
 1081  3                //IMDB_SendPacket(METROLOGY_SEND_ACCUMSPECTR_SUCCESS,(uint8*)&Channel,sizeof(uint8)); //–æ—Ç–ø—Ä–∞–≤–
             -∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–∏ —Å–ø–µ–∫—Ç—Ä–∞
 1082  3              IMDB_SendAccumSpectrSuccessSignalCallback(Channel);
 1083  3            }
 1084  2            
 1085  2            if( BDSPData[0].AccumSpectr == 1 && 
 1086  2                BDSPData[1].AccumSpectr == 1 &&
 1087  2                BDSPData[2].AccumSpectr == 1 &&
 1088  2                BDSPData[3].AccumSpectr == 1){
 1089  3                  
 1090  3          
 1091  3                  
 1092  3                  
 1093  3                  BDSP_SetSpectrSize(SIZE_128);//—Å—Ç–∞–≤–∏–º —Ä–∞–∑–º–µ—Ä —Å–ø–µ–∫—Ç—Ä–∞ 128 –∫–∞–Ω–∞–ª–æ–≤
 1094  3                  
 1095  3                  
 1096  3                    if(BDSPAccumMode == ACCUM_AND_MEASURE){
 1097  4                      //TODO —Ä–∞—Å—Å—á—ë—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–± –æ–∫–æ–Ω—á–∞
             -–Ω–∏–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è. –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞
 1098  4                      //–µ—Å–ª–∏ —É –Ω–∞—Å –ø–µ—Ä–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
 1099  4                      fCurrentDoseRate = BDSP_GetDoseRate();
 1100  4                      
 1101  4                      if(MeasureInPntData.MeasureNumber == 1)
 1102  4                      {
 1103  5                        /*
 1104  5                          –ø–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Å—á—ë—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 1105  5                          —Å—á–∏—Ç–∞–µ–º —É–≥–ª–æ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≥–ª–∞
 1106  5                          –ø–æ–ª—É—á–∞–µ–º –ú–î —Å–Ω–∞—Ä—É–∂–∏
 1107  5                          –ø–æ–ª—É—á–∞–µ–º —É–≥–æ–ª
 1108  5                          –ø–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–ø–∏–∫
 1109  5                          –ø–æ–ª—É—á–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å —Å—á—ë—Ç–∞ –≤ –æ–∫–Ω–µ —Ñ–æ—Ç–æ–ø–∏–∫–∞
 1110  5                        */
 1111  5                          iJIndexNuclideIdentification = BDSP_Identification(&photoPeak,&spdCounter); //–∑–∞–ø–æ–º–∏–Ω–∞–µ
             -–º –∏–Ω–¥–µ–∫—Å –æ–∫–Ω–∞
 1112  5                        
 1113  5                        BDSP_CalculateAngularDiagram(SIZE_1024);
 1114  5                        
 1115  5                        MeasureInPntData.fMaxAngle    = BDSP_GetMaximumAngle();
 1116  5                        MeasureInPntData.fDoseRate    = fCurrentDoseRate;
 1117  5                        MeasureInPntData.ePhotoPeak   = photoPeak;
 1118  5                        MeasureInPntData.iSpdCounter  = spdCounter;
 1119  5                        
C166 COMPILER V7.53.0.0, BDSP                                                              10/31/2017 16:48:58 PAGE 20  

 1120  5                        IMDB_SendMeasureInPointEndSignalCallback();
 1121  5                      }
 1122  4                      if(MeasureInPntData.MeasureNumber == 2)
 1123  4                      { 
 1124  5                        BDSP_Identification(&photoPeak,&spdCounter);  //–∑–∞–ø–æ–º–∏–Ω–∞–µ–º –∏–Ω–¥–µ–∫—Å –æ–∫–Ω–∞
 1125  5                        
 1126  5                        BDSP_CalculateAngularDiagram(SIZE_1024);
 1127  5                        
 1128  5                        MeasureInPntData.fMaxAngle = BDSP_GetMaximumAngle();
 1129  5                        MeasureInPntData.fDoseRate = fCurrentDoseRate;
 1130  5                        MeasureInPntData.iSpdCounter = spdCounter;
 1131  5                        
 1132  5                        IMDB_SendMeasureInPointEndSignalCallback();
 1133  5                      }
 1134  4                    }       
 1135  3                    
 1136  3                  Process_SetStatus(IMDB_FULLTIME_WORK);
 1137  3                  BDSP_ClearWorkData();
 1138  3            }
 1139  2        }
 1140  1        
 1141  1        
 1142  1      }
 1143         
 1144         void BDSP_ClearData()
 1145         {
 1146  1        uint8 i = 0;
 1147  1        
 1148  1        for(i = 0;i<CHANNELS;i++){
 1149  2          memset(BDSPData[i].InputData,0,sizeof(uint16) * SPECTR_SIZE * 2);
 1150  2          memset(BDSPData[i].WorkData,0,sizeof(uint16) * SPECTR_SIZE);
 1151  2          memset(BDSPData[i].AccumSpectrData,0,sizeof(float) * SPECTR_SIZE);
 1152  2          
 1153  2          BDSPData[i].ActiveBuffer = 0;
 1154  2          BDSPData[i].AccumSpectrIndex = 0;
 1155  2          BDSPData[i].AccumSpectr = 0;
 1156  2        }
 1157  1      }
 1158         
 1159         void BDPS_ClearQuery()
 1160         {
 1161  1        uint8 i = 0;
 1162  1        
 1163  1          for(i = 0;i<CHANNELS;i++){
 1164  2            memset(BDSPData[i].Data,0,sizeof(uint16) * SPECTR_SIZE * QUERY_SIZE);
 1165  2            BDSPData[i].QueryIndex = 0;
 1166  2          }
 1167  1      }
 1168         
 1169         
 1170         uint8 *BDSP_GetCurrentSpectr()
 1171         {
 1172  1        uint8 channel = 0;
 1173  1        
 1174  1          BDSP_CalculateIntegral();
 1175  1          BDSP_MaxCounter(&channel);  //–ø–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –∫–∞–Ω–∞–ª–∞ —Å –º–∞–∫—Å. —Å—á—ë—Ç–æ–º
 1176  1          
 1177  1        return BDSP_GetChannelSpectr(channel);
 1178  1      }
 1179         uint8 *BDSP_DEBUG_GetQuerySumSpectr(uint8 channel)
 1180         {
 1181  1        uint8 i = 0,j = 0;
C166 COMPILER V7.53.0.0, BDSP                                                              10/31/2017 16:48:58 PAGE 21  

 1182  1        
 1183  1        memset(&BDSPData[channel].DebugData,0,sizeof(uint16) * SPECTR_SIZE_128);
 1184  1        
 1185  1        for(i = 0;i<QUERY_SIZE;i++)
 1186  1          for(j = 0;j<SPECTR_SIZE_128;j++)
 1187  1            BDSPData[channel].DebugData[j] += BDSPData[channel].Data[i][j];
 1188  1        
 1189  1        return  BDSPData[channel].DebugData;
 1190  1      }
 1191         
 1192         uint8 *BDSP_GetChannelSpectr(uint8  channel)
 1193         { 
 1194  1        return (uint8*)&BDSPData[channel].WorkData[0];
 1195  1      }
 1196         uint8 *BDSP_GetAccumulationSpectr(uint8 Channel)
 1197         {
 1198  1        return (uint8*)&BDSPData[Channel].AccumSpectrData[0];
 1199  1      }
 1200         
 1201         void  BDSP_CalculateAngularDiagram(eSpecMode Mode)
 1202         {
 1203  1        static float  *pAngleDiagramm;
 1204  1        
 1205  1        static float cntMin = 0;
 1206  1        static float cntMax = 0;
 1207  1        uint16 i = 0;
 1208  1        static float sensorArray[4];
 1209  1        
 1210  1        /*
 1211  1          –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Ä–∞—Å—Å—á—ë—Ç–∞ —É–≥–ª–æ–≤–æ–π –¥–∏–∞–
             -≥—Ä–∞–º–º—ã —Å—á–∏—Ç–∞–µ–º –ª–∏–±–æ –ø–æ —Å—É–º–º–µ –¥–≤–∏–∂–∫–∞, –ª–∏–±–æ –ø–æ —Å—É–º–º–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–ø
             -–µ–∫—Ç—Ä–∞
 1212  1        */
 1213  1        if(Mode == SIZE_128)
 1214  1        { 
 1215  2          for(i = 0;i<CHANNELS;i++){
 1216  3            sensorArray[i] = BDSP_CalculateQuerySum(i);
 1217  3          }
 1218  2        }
 1219  1        else
 1220  1        {
 1221  2          for(i = 0;i<CHANNELS;i++){
 1222  3            sensorArray[i] = BDSPData[i].Integral;
 1223  3          }
 1224  2        }
 1225  1          
 1226  1        cntMin = 100000.0f;
 1227  1        cntMax = 0.0f;
 1228  1        
 1229  1        for(i = 0;i<CHANNELS;i++){
 1230  2          if(sensorArray[i] > cntMax)
 1231  2            cntMax = sensorArray[i];
 1232  2          
 1233  2          if(sensorArray[i]<cntMin)
 1234  2            cntMin = sensorArray[i];
 1235  2          
 1236  2        }
 1237  1          pAngleDiagramm  = BDGP_DirectionDiagramm(sensorArray, CHANNELS, cntMin,cntMax,&radiationMaximum,SPEC_MODE
             -);  
 1238  1        
 1239  1        memcpy((uint8*)&fpBDSPAngleDiagramm,(uint8*)pAngleDiagramm,sizeof(float) * 48);
 1240  1        //return pAngleDiagramm;
C166 COMPILER V7.53.0.0, BDSP                                                              10/31/2017 16:48:58 PAGE 22  

 1241  1      }
 1242         
 1243         float *BDSP_GetAngularDiagram()
 1244         {/*
 1245  1        float *pAngleDiagramm;
 1246  1        
 1247  1        static float cntMin = 0;
 1248  1        static float cntMax = 0;
 1249  1        uint16 i = 0;
 1250  1        static float sensorArray[4];
 1251  1        
 1252  1        for(i = 0;i<CHANNELS;i++){
 1253  1          sensorArray[i] = BDSP_CalculateQuerySum(i);
 1254  1        }
 1255  1      
 1256  1        cntMin = 100000.0f;
 1257  1        cntMax = 0.0f;
 1258  1        
 1259  1        for(i = 0;i<CHANNELS;i++){
 1260  1          if(sensorArray[i] > cntMax)
 1261  1            cntMax = sensorArray[i];
 1262  1          
 1263  1          if(sensorArray[i]<cntMin)
 1264  1            cntMin = sensorArray[i];
 1265  1          
 1266  1        }
 1267  1          pAngleDiagramm  = BDGP_DirectionDiagramm(sensorArray, CHANNELS, cntMin,cntMax,&radiationMaximum,SPEC_MODE
             -);  
 1268  1        
 1269  1        return pAngleDiagramm;*/
 1270  1        
 1271  1        return fpBDSPAngleDiagramm;
 1272  1      }
 1273         
 1274         
 1275         uint16  BDSP_GetMaximumAngle()
 1276         {
 1277  1        return radiationMaximum;
 1278  1      }
 1279         float   BDSP_GetDose()
 1280         {
 1281  1        float fDose = 0;
 1282  1        uint8 i = 0;
 1283  1        
 1284  1        for(i = 0;i<CHANNELS;i++){
 1285  2          fDose += BDSPData[i].Dose;
 1286  2        }
 1287  1        fDose = fDose / CHANNELS;
 1288  1        
 1289  1        return fDose;
 1290  1      }
 1291         //—Ñ-–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ú–î
 1292         float   BDSP_GetDoseRate()
 1293         {
 1294  1        float fDoseRate = 0;
 1295  1        uint8 i = 0;
 1296  1        
 1297  1        for(i = 0;i<CHANNELS;i++){
 1298  2          if(BDSPData[i].DoseRate > fDoseRate)
 1299  2            fDoseRate = BDSPData[i].DoseRate;
 1300  2        }
 1301  1        return fDoseRate;
C166 COMPILER V7.53.0.0, BDSP                                                              10/31/2017 16:48:58 PAGE 23  

 1302  1      }
 1303         
 1304         uint8 BDSP_GetBackgroundReady()
 1305         {
 1306  1        if( (BDSPData[0].Background == 1) && (BDSPData[1].Background == 1) && (BDSPData[2].Background == 1) && (B
             -DSPData[3].Background == 1) ){
 1307  2            return 1;
 1308  2        }
 1309  1        else
 1310  1          return 0;
 1311  1      }
 1312         
 1313         
 1314         void  BDSP_Process()
 1315         {
 1316  1        uint8 i = 0;
 1317  1        uint8 changeBufferEventCnt = 0;
 1318  1        /*switch(Process_GetOperationMode())
 1319  1        {
 1320  1          case IMDB_FULLTIME_WORK:
 1321  1          {*/
 1322  1            for(i = 0;i<CHANNELS;i++)
 1323  1            {
 1324  2              //–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å–º–µ–Ω—ã –±—É—Ñ–µ—Ä–∞
 1325  2              if(BDSPData[i].ChangeBufferEvent){
 1326  3                BDSPData[i].ChangeBufferEvent = 0;
 1327  3                
 1328  3                if(BDSPData[i].ActiveBuffer == 1)
 1329  3                  memcpy(BDSPData[i].WorkData,BDSPData[i].InputData[0],sizeof(uint16) * SPECTR_SIZE);
 1330  3                else
 1331  3                  memcpy(BDSPData[i].WorkData,BDSPData[i].InputData[1],sizeof(uint16) * SPECTR_SIZE); 
 1332  3                
 1333  3                
 1334  3                switch(Process_GetOperationMode())
 1335  3                {
 1336  4                  case IMDB_FULLTIME_WORK:{
 1337  5                    //–ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∫–æ–ø–ª–µ–Ω –ª–∏ —Ñ–æ–Ω —É –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
 1338  5                    if( (BDSPData[0].Background == 1) && (BDSPData[1].Background == 1) && (BDSPData[2].Background == 1)
             - && (BDSPData[3].Background == 1) ) { 
 1339  6                      BDSP_InsertInQuery(BDSPData[i].WorkData,i);
 1340  6                      //–≤—ã–ø–æ–ª–Ω—è–µ–º —Ñ–æ–Ω–æ–≤—É—é –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
 1341  6                      
 1342  6                      changeBufferEventCnt++;
 1343  6                      //–ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤—Å–µ—Ö 4 –∫–∞–Ω–∞–ª–æ–≤
 1344  6                      if(changeBufferEventCnt == CHANNELS){
 1345  7                        //–ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∫–æ–ø–ª–µ–Ω –ª–∏ –¥–≤–∏–∂–æ–∫
 1346  7                          if(BDSP_GetAccumQueryState()){
 1347  8                            BDSP_Identification128();
 1348  8      
 1349  8                          }
 1350  7                          
 1351  7                        changeBufferEventCnt = 0;
 1352  7                      }
 1353  6                      
 1354  6                        
 1355  6                    }
 1356  5                    /*
 1357  5                      TODO –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ä–µ–∂–∏–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞ 
 1358  5                    
 1359  5                    else
 1360  5                      BDSP_BackgroundAccumulation(i,BDSPData[i].WorkData);
 1361  5                    */
C166 COMPILER V7.53.0.0, BDSP                                                              10/31/2017 16:48:58 PAGE 24  

 1362  5                  }break;
 1363  4                  
 1364  4                  case IMDB_BACKGROUND_ACCUMULATION:{
 1365  5                    //–µ—Å–ª–∏ —Ñ–æ–Ω —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–µ –Ω–∞–∫–æ–ø–ª–µ–Ω
 1366  5                    if(BDSPData[i].Background == 0)
 1367  5                      BDSP_BackgroundAccumulation(i,BDSPData[i].WorkData);//–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–æ–Ω
 1368  5                  }break;
 1369  4                  
 1370  4                  case IMDB_SPECTR_ACCUMULATION:{
 1371  5                    BDSP_SpectrAccumulation(i,BDSPData[i].WorkData);
 1372  5                  }break;
 1373  4                }
 1374  3              }
 1375  2            }
 1376  1          /*}break;
 1377  1          
 1378  1          case IMDB_SPECTR_ACCUMULATION:
 1379  1          {
 1380  1            BDSP_SpectrAccumulation(i,BDSPData[i].WorkData);
 1381  1          }break;
 1382  1        }*/
 1383  1      }
 1384         void  BDSP_SetMeasureNumber(uint8 MeasureNum)
 1385         {
 1386  1        MeasureInPntData.MeasureNumber = MeasureNum;
 1387  1      }
 1388         
 1389         uint8 *BDSP_GetParametrs()
 1390         {
 1391  1        return (uint8*)&BDSPParametrs;
 1392  1      }
 1393         uint8 BDSP_GetAccumQueryState()
 1394         {
 1395  1        uint8 Result = 1;
 1396  1        uint8 i = 0;
 1397  1        
 1398  1          for(i = 0;i<CHANNELS;i++){
 1399  2            if(BDSPData[i].QueryIndex != QUERY_SIZE){
 1400  3              Result = 0;
 1401  3              break;
 1402  3            }
 1403  2          }
 1404  1        
 1405  1        return Result;
 1406  1      }
 1407         float BDSP_GetBackgroundQueryIntegral()
 1408         {
 1409  1        return fBackgroundIntergal * QUERY_SIZE;
 1410  1      }
 1411         sSpecModeData     BDSP_GetMeasureInPointData()
 1412         {
 1413  1          return MeasureInPntData;
 1414  1      }


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =       13706     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =          80     --------
  NEAR-DATA SIZE   =         122     --------
C166 COMPILER V7.53.0.0, BDSP                                                              10/31/2017 16:48:58 PAGE 25  

  FAR-DATA SIZE    =    --------     --------
  XHUGE-DATA SIZE  =      137624     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =          62     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
